#!/usr/bin/env python3
"""
Ph√°t hi·ªán m·∫´u gian l·∫≠n n√¢ng cao t·∫≠p trung v√†o vi·ªác c√¢n b·∫±ng precision v√† recall.
Script n√†y th·ª±c hi·ªán nh·ªØng ph√°t hi·ªán ph·ª©c t·∫°p h∆°n ƒë·ªÉ ph√°t hi·ªán gian l·∫≠n v√† s·ª≠ d·ª•ng ƒëi·ªÉm s·ªë hybrid.
"""
import argparse
import time
import sys
import os
import json
import numpy as np
from sklearn.metrics import precision_recall_fscore_support, accuracy_score

# Th√™m th∆∞ m·ª•c g·ªëc v√†o sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from detector.database_manager import DatabaseManager
from detector.utils.config import NEO4J_URI, NEO4J_USER, NEO4J_PASSWORD

class AdvancedPatternDetection:
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        
    def detect_all_patterns(self):
        """Ch·∫°y t·∫•t c·∫£ c√°c ph√°t hi·ªán m·∫´u gian l·∫≠n n√¢ng cao."""
        print("üîÑ ƒêang ph√°t hi·ªán c√°c m·∫´u gian l·∫≠n n√¢ng cao...")
        
        # 1. Ph√°t hi·ªán m·∫´u giao d·ªãch "B√πng n·ªï" (Burst Transactions)
        self.detect_burst_transactions()
        
        # 2. Ph√°t hi·ªán m·∫´u "M·ªü t√†i kho·∫£n m·ªõi + giao d·ªãch l·ªõn"
        self.detect_new_account_large_transactions()
        
        # 3. Ph√°t hi·ªán m·∫´u "T√†i kho·∫£n trung gian" (Pass-through Accounts)
        self.detect_passthrough_accounts()
        
        # 4. Ph√°t hi·ªán m·∫´u "Ph√¢n t√°ch v√† t√°i h·ª£p" (Split & Merge)
        self.detect_split_merge_pattern()
        
        # 5. Ph√°t hi·ªán m·∫´u "V√≤ng l·∫∑p gi·ªØa t·ªï ch·ª©c" (Institutional Cycling)
        self.detect_institutional_cycling()
        
        # 6. K·∫øt h·ª£p t·∫•t c·∫£ c√°c ƒëi·ªÉm
        self.calculate_combined_pattern_score()
        
        print("‚úÖ Ho√†n th√†nh ph√°t hi·ªán c√°c m·∫´u gian l·∫≠n n√¢ng cao.")
    
    def detect_burst_transactions(self):
        """Ph√°t hi·ªán m·∫´u giao d·ªãch b√πng n·ªï trong th·ªùi gian ng·∫Øn."""
        print("  - ƒêang ph√°t hi·ªán m·∫´u giao d·ªãch b√πng n·ªï...")
        
        burst_query = """
        // Ph√°t hi·ªán t√†i kho·∫£n c√≥ nhi·ªÅu giao d·ªãch trong th·ªùi gian ng·∫Øn
        MATCH (a:Account)-[tx:SENT]->()
        WITH a, tx.step AS step
        ORDER BY a, step
        WITH a, collect(step) AS steps
        WHERE size(steps) >= 3
        
        // Ph√¢n t√≠ch kho·∫£ng th·ªùi gian gi·ªØa c√°c giao d·ªãch
        WITH a, steps,
             [i IN range(0, size(steps)-2) | steps[i+1] - steps[i]] AS intervals
        
        // T√¨m c√°c kho·∫£ng th·ªùi gian ng·∫Øn b·∫•t th∆∞·ªùng
        WITH a, intervals,
             [interval IN intervals WHERE interval <= 2] AS short_intervals
        WHERE size(short_intervals) >= 2
        
        // G√°n ƒëi·ªÉm burst d·ª±a tr√™n s·ªë l∆∞·ª£ng kho·∫£ng th·ªùi gian ng·∫Øn
        SET a.burstScore = CASE
            WHEN size(short_intervals) >= 5 THEN 0.9
            WHEN size(short_intervals) >= 3 THEN 0.7
            ELSE 0.5
        END
        """
        
        self.db_manager.run_query(burst_query)
        
        # Set default value for accounts with no burst transactions
        default_query = """
        MATCH (a:Account)
        WHERE a.burstScore IS NULL
        SET a.burstScore = 0.0
        """
        self.db_manager.run_query(default_query)
    
    def detect_new_account_large_transactions(self):
        """Ph√°t hi·ªán t√†i kho·∫£n m·ªõi c√≥ giao d·ªãch l·ªõn b·∫•t th∆∞·ªùng."""
        print("  - ƒêang ph√°t hi·ªán m·∫´u t√†i kho·∫£n m·ªõi + giao d·ªãch l·ªõn...")
        
        new_account_query = """
        // T√≠nh ƒëi·ªÉm cho t√†i kho·∫£n m·ªõi c√≥ giao d·ªãch l·ªõn
        MATCH (a:Account)-[tx:SENT]->()
        WHERE tx.step <= 5  // T√†i kho·∫£n m·ªõi (giao d·ªãch trong 5 b∆∞·ªõc ƒë·∫ßu)
        WITH a, sum(tx.amount) AS early_total, count(tx) AS early_count
        
        // T√¨m t·ªïng s·ªë giao d·ªãch c·ªßa t√†i kho·∫£n
        MATCH (a)-[all_tx:SENT]->()
        WITH a, early_total, early_count, count(all_tx) AS total_count
        
        // ƒê√°nh gi√° m·ª©c ƒë·ªô ƒë√°ng ng·ªù
        WITH a, 
             early_total,
             early_count,
             total_count,
             CASE WHEN total_count > 0 THEN early_count / toFloat(total_count) ELSE 0 END AS early_ratio
        
        // G√°n ƒëi·ªÉm d·ª±a tr√™n t·ªïng s·ªë ti·ªÅn s·ªõm v√† t·ª∑ l·ªá giao d·ªãch s·ªõm
        SET a.newAccountScore = CASE
            WHEN early_total > 50000 AND early_ratio >= 0.5 THEN 0.95  // Giao d·ªãch l·ªõn v√† ch·ªß y·∫øu l√† ban ƒë·∫ßu
            WHEN early_total > 10000 AND early_ratio >= 0.7 THEN 0.85  // Giao d·ªãch kh√° l·ªõn v√† h·∫ßu h·∫øt l√† ban ƒë·∫ßu
            WHEN early_total > 5000 AND early_ratio >= 0.5 THEN 0.75   // Giao d·ªãch trung b√¨nh v√† m·ªôt n·ª≠a l√† ban ƒë·∫ßu
            WHEN early_total > 1000 THEN 0.5                          // Giao d·ªãch nh·ªè h∆°n
            ELSE 0.0
        END
        """
        
        self.db_manager.run_query(new_account_query)
        
        # Set default value for accounts with no early transactions
        default_query = """
        MATCH (a:Account)
        WHERE a.newAccountScore IS NULL
        SET a.newAccountScore = 0.0
        """
        self.db_manager.run_query(default_query)
    
    def detect_passthrough_accounts(self):
        """Ph√°t hi·ªán t√†i kho·∫£n trung gian ch·ªâ chuy·ªÉn ti·ªÅn ƒëi ngay sau khi nh·∫≠n."""
        print("  - ƒêang ph√°t hi·ªán m·∫´u t√†i kho·∫£n trung gian...")
        
        passthrough_query = """
        // T√¨m c√°c c·∫∑p giao d·ªãch nh·∫≠n-g·ª≠i trong th·ªùi gian ng·∫Øn
        MATCH (sender:Account)-[tx1:SENT]->()-[:RECEIVED]->(a:Account)-[tx2:SENT]->()-[:RECEIVED]->(receiver:Account)
        WHERE id(sender) <> id(receiver)  // Tr√°nh giao d·ªãch v√≤ng tr√≤n tr·ª±c ti·∫øp
          AND abs(tx2.step - tx1.step) <= 2  // Chuy·ªÉn ti·ªÅn ƒëi ngay sau khi nh·∫≠n
          AND abs(tx2.amount - tx1.amount) / tx1.amount < 0.1  // S·ªë ti·ªÅn g·∫ßn nh∆∞ kh√¥ng ƒë·ªïi
        
        // ƒê·∫øm s·ªë l·∫ßn l√†m trung gian
        WITH a, count(*) AS passthrough_count
        
        // G√°n ƒëi·ªÉm d·ª±a tr√™n s·ªë l·∫ßn l√†m trung gian
        SET a.passthroughScore = CASE
            WHEN passthrough_count >= 5 THEN 0.95  // Nhi·ªÅu l·∫ßn l√†m trung gian
            WHEN passthrough_count >= 3 THEN 0.85  // Kh√° nhi·ªÅu l·∫ßn l√†m trung gian
            WHEN passthrough_count >= 2 THEN 0.7   // √çt nh·∫•t 2 l·∫ßn l√†m trung gian
            ELSE 0.5                              // √çt nh·∫•t 1 l·∫ßn l√†m trung gian
        END
        """
        
        self.db_manager.run_query(passthrough_query)
        
        # Set default value for accounts with no passthrough behavior
        default_query = """
        MATCH (a:Account)
        WHERE a.passthroughScore IS NULL
        SET a.passthroughScore = 0.0
        """
        self.db_manager.run_query(default_query)
    
    def detect_split_merge_pattern(self):
        """Ph√°t hi·ªán m·∫´u ph√¢n t√°ch v√† t√°i h·ª£p (split & merge)."""
        print("  - ƒêang ph√°t hi·ªán m·∫´u ph√¢n t√°ch v√† t√°i h·ª£p (split & merge)...")
        
        split_merge_query = """
        // Ph√°t hi·ªán m·∫´u ph√¢n t√°ch: 1 t√†i kho·∫£n g·ª≠i cho nhi·ªÅu t√†i kho·∫£n kh√°c g·∫ßn nh∆∞ c√πng l√∫c
        MATCH (source:Account)-[tx1:SENT]->()-[:RECEIVED]->(mid:Account)
        WHERE tx1.step >= 0
        WITH source, mid, tx1.step AS split_step
        ORDER BY source, split_step
        WITH source, split_step, collect(mid) AS recipients
        WHERE size(recipients) >= 3  // Ph√¢n t√°ch th√†nh √≠t nh·∫•t 3 giao d·ªãch
        
        // L∆∞u v·∫øt t√†i kho·∫£n ngu·ªìn
        WITH source, split_step, recipients
        SET source.splitScore = CASE 
            WHEN size(recipients) >= 5 THEN 0.9
            WHEN size(recipients) >= 3 THEN 0.7
            ELSE 0.5
        END
        
        // Ti·∫øp t·ª•c t√¨m m·∫´u t√°i h·ª£p
        WITH recipients AS split_accounts, split_step
        
        // T√¨m giao d·ªãch t√°i h·ª£p t·ª´ c√°c t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c ph√¢n t√°ch
        MATCH (merge_account:Account)<-[:RECEIVED]-()<-[tx2:SENT]-(mid:Account)
        WHERE mid IN split_accounts
        AND tx2.step > split_step
        AND tx2.step - split_step <= 5  // T√°i h·ª£p x·∫£y ra kh√¥ng qu√° 5 b∆∞·ªõc sau ph√¢n t√°ch
        
        // ƒê·∫øm s·ªë l∆∞·ª£ng t√†i kho·∫£n trung gian g·ª≠i ƒë·∫øn t√†i kho·∫£n t√°i h·ª£p
        WITH merge_account, count(DISTINCT mid) AS merge_count, size(split_accounts) AS split_count
        
        // T√≠nh t·ª∑ l·ªá t√°i h·ª£p
        WITH merge_account, merge_count, split_count,
            merge_count / toFloat(split_count) AS merge_ratio
        
        // G√°n ƒëi·ªÉm t√°i h·ª£p
        SET merge_account.mergeScore = CASE
            WHEN merge_count >= 3 AND merge_ratio >= 0.8 THEN 0.95  // H·∫ßu h·∫øt c√°c giao d·ªãch ƒë∆∞·ª£c t√°i h·ª£p
            WHEN merge_count >= 2 AND merge_ratio >= 0.5 THEN 0.85  // Nhi·ªÅu giao d·ªãch ƒë∆∞·ª£c t√°i h·ª£p
            ELSE 0.6                                               // √çt nh·∫•t m·ªôt ph·∫ßn ƒë∆∞·ª£c t√°i h·ª£p
        END
        """
        
        self.db_manager.run_query(split_merge_query)
        
        # Set default values for accounts with no split behavior - FIX: Split into two separate queries
        split_default_query = """
        MATCH (a:Account)
        WHERE a.splitScore IS NULL
        SET a.splitScore = 0.0
        """
        self.db_manager.run_query(split_default_query)
        
        # Set default values for accounts with no merge behavior - FIX: Separate query
        merge_default_query = """
        MATCH (a:Account)
        WHERE a.mergeScore IS NULL
        SET a.mergeScore = 0.0
        """
        self.db_manager.run_query(merge_default_query)
    
    def detect_institutional_cycling(self):
        """Ph√°t hi·ªán m·∫´u v√≤ng l·∫∑p gi·ªØa c√°c t·ªï ch·ª©c."""
        print("  - ƒêang ph√°t hi·ªán m·∫´u v√≤ng l·∫∑p gi·ªØa t·ªï ch·ª©c...")
        
        cycling_query = """
        // T√¨m c√°c chu tr√¨nh c√≥ ƒë·ªô d√†i 4-5
        MATCH path = (a:Account)-[:SENT]->()-[:RECEIVED]->(b:Account)-[:SENT]->()-[:RECEIVED]->(c:Account)-[:SENT]->()-[:RECEIVED]->(d:Account)-[:SENT]->()-[:RECEIVED]->(a)
        WHERE id(a) <> id(b) AND id(b) <> id(c) AND id(c) <> id(d) AND id(a) <> id(c) AND id(b) <> id(d) AND id(a) <> id(d)
        
        // L·∫•y c√°c giao d·ªãch trong chu tr√¨nh
        WITH a, b, c, d, [r IN relationships(path) WHERE type(r) = 'SENT'] AS sent_txs
        
        // Ph√¢n t√≠ch s·ªë ti·ªÅn v√† th·ªùi gian
        WITH a, b, c, d,
             [tx IN sent_txs | tx.amount] AS amounts,
             [tx IN sent_txs | tx.step] AS steps
        
        // T√≠nh to√°n ch√™nh l·ªách gi·ªØa s·ªë ti·ªÅn l·ªõn nh·∫•t v√† nh·ªè nh·∫•t
        WITH a, b, c, d,
             CASE WHEN size(amounts) > 0 THEN reduce(max_val = 0.0, x IN amounts | CASE WHEN x > max_val THEN x ELSE max_val END) ELSE 0.0 END AS max_amount,
             CASE WHEN size(amounts) > 0 THEN reduce(min_val = 999999.0, x IN amounts | CASE WHEN x < min_val THEN x ELSE min_val END) ELSE 0.0 END AS min_amount,
             CASE WHEN size(steps) > 0 THEN reduce(max_val = 0, x IN steps | CASE WHEN x > max_val THEN x ELSE max_val END) ELSE 0 END AS max_step,
             CASE WHEN size(steps) > 0 THEN reduce(min_val = 999999, x IN steps | CASE WHEN x < min_val THEN x ELSE min_val END) ELSE 0 END AS min_step
        
        // T√≠nh to√°n t·ª∑ l·ªá ch√™nh l·ªách v√† kho·∫£ng th·ªùi gian
        WITH a, b, c, d,
             CASE WHEN min_amount = 0 THEN 999999.0 ELSE (max_amount - min_amount) / min_amount END AS amount_ratio,
             max_step - min_step AS cycle_time
        
        // G√°n ƒëi·ªÉm chu tr√¨nh t·ªï ch·ª©c
        WITH a, b, c, d, amount_ratio, cycle_time,
             CASE
                 WHEN cycle_time <= 5 AND amount_ratio <= 0.05 THEN 0.95  // Chu tr√¨nh r·∫•t nhanh v√† s·ªë ti·ªÅn g·∫ßn nh∆∞ kh√¥ng ƒë·ªïi
                 WHEN cycle_time <= 10 AND amount_ratio <= 0.1 THEN 0.9   // Chu tr√¨nh nhanh v√† s·ªë ti·ªÅn thay ƒë·ªïi r·∫•t √≠t
                 WHEN cycle_time <= 15 AND amount_ratio <= 0.2 THEN 0.8   // Chu tr√¨nh kh√° nhanh v√† s·ªë ti·ªÅn thay ƒë·ªïi √≠t
                 ELSE 0.7                                                // Chu tr√¨nh kh√°c
             END AS cycling_score
        
        // G√°n ƒëi·ªÉm cho t·∫•t c·∫£ c√°c t√†i kho·∫£n trong chu tr√¨nh
        SET a.institutionalCyclingScore = cycling_score,
            b.institutionalCyclingScore = cycling_score,
            c.institutionalCyclingScore = cycling_score,
            d.institutionalCyclingScore = cycling_score
        """
        
        self.db_manager.run_query(cycling_query)
        
        # Set default value for accounts with no institutional cycling
        default_query = """
        MATCH (a:Account)
        WHERE a.institutionalCyclingScore IS NULL
        SET a.institutionalCyclingScore = 0.0
        """
        self.db_manager.run_query(default_query)
    
    def calculate_combined_pattern_score(self):
        """K·∫øt h·ª£p t·∫•t c·∫£ c√°c ƒëi·ªÉm m·∫´u th√†nh m·ªôt ƒëi·ªÉm t·ªïng h·ª£p."""
        print("  - ƒêang k·∫øt h·ª£p c√°c ƒëi·ªÉm m·∫´u...")
        
        combined_query = """
        MATCH (a:Account)
        WITH a,
             COALESCE(a.burstScore, 0.0) AS burst,
             COALESCE(a.newAccountScore, 0.0) AS new_account,
             COALESCE(a.passthroughScore, 0.0) AS passthrough,
             COALESCE(a.splitScore, 0.0) AS split,
             COALESCE(a.mergeScore, 0.0) AS merge,
             COALESCE(a.institutionalCyclingScore, 0.0) AS cycling
        
        // K·∫øt h·ª£p c√°c ƒëi·ªÉm v·ªõi tr·ªçng s·ªë
        SET a.advancedPatternScore = 
            burst * 0.15 +
            new_account * 0.2 +
            passthrough * 0.2 +
            split * 0.15 +
            merge * 0.15 +
            cycling * 0.15
        """
        
        self.db_manager.run_query(combined_query)
        
        # Chu·∫©n h√≥a ƒëi·ªÉm cu·ªëi c√πng
        normalize_query = """
        MATCH (a:Account)
        WITH MIN(a.advancedPatternScore) AS min_score, MAX(a.advancedPatternScore) AS max_score
        MATCH (a:Account)
        SET a.advancedPatternScore = CASE 
            WHEN max_score = min_score THEN 0
            ELSE (a.advancedPatternScore - min_score) / (max_score - min_score)
        END
        """
        self.db_manager.run_query(normalize_query)
        
        # Truy·ªÅn ƒëi·ªÉm t·ª´ Account ƒë·∫øn Transaction
        propagate_query = """
        MATCH (a:Account)-[tx:SENT]->()
        SET tx.advancedPatternScore = a.advancedPatternScore
        """
        self.db_manager.run_query(propagate_query)
        
        # K·∫øt h·ª£p ƒëi·ªÉm pattern v·ªõi ƒëi·ªÉm anomaly_score ƒë·ªÉ t·∫°o ƒëi·ªÉm t·ªïng h·ª£p t·ªët h∆°n
        final_combine_query = """
        MATCH ()-[tx:SENT]->()
        WHERE tx.advancedPatternScore IS NOT NULL
        SET tx.enhancedHybridScore = CASE
            WHEN tx.anomaly_score IS NOT NULL AND tx.advancedAnomalyScore IS NOT NULL
            THEN tx.anomaly_score * 0.3 + tx.advancedAnomalyScore * 0.4 + tx.advancedPatternScore * 0.3
            WHEN tx.anomaly_score IS NOT NULL
            THEN tx.anomaly_score * 0.6 + tx.advancedPatternScore * 0.4
            WHEN tx.advancedAnomalyScore IS NOT NULL
            THEN tx.advancedAnomalyScore * 0.7 + tx.advancedPatternScore * 0.3
            ELSE tx.advancedPatternScore
        END
        """
        self.db_manager.run_query(final_combine_query)
        
        print("‚úÖ ƒê√£ t√≠nh to√°n v√† g√°n c√°c ƒëi·ªÉm m·∫´u cho t·∫•t c·∫£ t√†i kho·∫£n v√† giao d·ªãch.")

def main():
    parser = argparse.ArgumentParser(description='Ph√°t hi·ªán m·∫´u gian l·∫≠n n√¢ng cao')
    
    parser.add_argument('--evaluate', action='store_true',
                       help='ƒê√°nh gi√° hi·ªáu su·∫•t sau khi ph√°t hi·ªán m·∫´u')
    
    args = parser.parse_args()
    
    # Neo4j connection
    try:
        db_manager = DatabaseManager(uri=NEO4J_URI, user=NEO4J_USER, password=NEO4J_PASSWORD)
        
        # Kh·ªüi t·∫°o v√† ch·∫°y ph√°t hi·ªán m·∫´u n√¢ng cao
        pattern_detector = AdvancedPatternDetection(db_manager)
        
        print(f"""
        =========================================================
        üîç Advanced Pattern Detection
        =========================================================
        ‚Ä¢ Ph√°t hi·ªán m·∫´u giao d·ªãch b√πng n·ªï
        ‚Ä¢ Ph√°t hi·ªán m·∫´u t√†i kho·∫£n m·ªõi + giao d·ªãch l·ªõn
        ‚Ä¢ Ph√°t hi·ªán m·∫´u t√†i kho·∫£n trung gian
        ‚Ä¢ Ph√°t hi·ªán m·∫´u ph√¢n t√°ch v√† t√°i h·ª£p (split & merge)
        ‚Ä¢ Ph√°t hi·ªán m·∫´u v√≤ng l·∫∑p gi·ªØa t·ªï ch·ª©c
        =========================================================
        """)
        
        # Ph√°t hi·ªán c√°c m·∫´u n√¢ng cao
        pattern_detector.detect_all_patterns()
        
        # ƒê√°nh gi√° hi·ªáu su·∫•t n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if args.evaluate:
            print("\nüîÑ ƒêang ƒë√°nh gi√° hi·ªáu su·∫•t v·ªõi ƒëi·ªÉm m·∫´u n√¢ng cao...")
            
            # ƒê√°nh d·∫•u giao d·ªãch b·∫•t th∆∞·ªùng d·ª±a tr√™n enhancedHybridScore
            flag_query = """
            MATCH ()-[tx:SENT]->()
            WHERE tx.enhancedHybridScore IS NOT NULL
            WITH percentileCont(tx.enhancedHybridScore, 0.95) AS threshold
            
            MATCH ()-[tx:SENT]->()
            WHERE tx.enhancedHybridScore IS NOT NULL
            SET tx.patternFlagged = tx.enhancedHybridScore >= threshold
            """
            db_manager.run_query(flag_query)
            
            # ƒê√°nh gi√° hi·ªáu su·∫•t
            evaluation_query = """
            MATCH ()-[tx:SENT]->()
            WHERE tx.patternFlagged IS NOT NULL
            WITH
                SUM(CASE WHEN tx.patternFlagged = true AND tx.ground_truth_fraud = true THEN 1 ELSE 0 END) AS true_positives,
                SUM(CASE WHEN tx.patternFlagged = true AND tx.ground_truth_fraud = false THEN 1 ELSE 0 END) AS false_positives,
                SUM(CASE WHEN tx.patternFlagged = false AND tx.ground_truth_fraud = true THEN 1 ELSE 0 END) AS false_negatives,
                SUM(CASE WHEN tx.patternFlagged = false AND tx.ground_truth_fraud = false THEN 1 ELSE 0 END) AS true_negatives,
                COUNT(*) AS total_transactions,
                SUM(CASE WHEN tx.ground_truth_fraud = true THEN 1 ELSE 0 END) AS total_fraud

            // Calculate precision and recall
            WITH
                true_positives, false_positives, false_negatives, true_negatives, 
                total_transactions, total_fraud,
                CASE WHEN (true_positives + false_positives) > 0 
                    THEN toFloat(true_positives) / (true_positives + false_positives) 
                    ELSE 0 
                END AS precision,
                CASE WHEN (true_positives + false_negatives) > 0 
                    THEN toFloat(true_positives) / (true_positives + false_negatives) 
                    ELSE 0 
                END AS recall

            // Then use precision and recall to calculate F1 score
            WITH 
                true_positives, false_positives, false_negatives, true_negatives,
                total_transactions, total_fraud, precision, recall,
                CASE 
                    WHEN (precision + recall) > 0 
                    THEN 2 * precision * recall / (precision + recall) 
                    ELSE 0 
                END AS f1_score,
                toFloat(true_positives + true_negatives) / total_transactions AS accuracy
                
            RETURN *
            """
            
            result = db_manager.run_query(evaluation_query)
            
            if result:
                print("\nüìä K·∫øt qu·∫£ ƒë√°nh gi√° hi·ªáu su·∫•t m·∫´u n√¢ng cao:")
                print(f"  ‚Ä¢ Precision: {result['precision']:.4f}")
                print(f"  ‚Ä¢ Recall: {result['recall']:.4f}")
                print(f"  ‚Ä¢ F1 Score: {result['f1_score']:.4f}")
                print(f"  ‚Ä¢ Accuracy: {result['accuracy']:.4f}")
                
                # L∆∞u metrics
                metrics = {
                    "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                    "model": "advanced_pattern_detection",
                    "metrics": {
                        "true_positives": result['true_positives'],
                        "false_positives": result['false_positives'],
                        "false_negatives": result['false_negatives'],
                        "true_negatives": result['true_negatives'],
                        "total_transactions": result['total_transactions'],
                        "total_fraud": result['total_fraud'],
                        "precision": result['precision'],
                        "recall": result['recall'],
                        "f1_score": result['f1_score'],
                        "accuracy": result['accuracy']
                    }
                }
                
                # L∆∞u metrics ra file
                with open('advanced_pattern_detection_metrics.json', 'w', encoding='utf-8') as f:
                    json.dump(metrics, f, indent=2)
                
                print("\n‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ ƒë√°nh gi√° v√†o file advanced_pattern_detection_metrics.json")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
