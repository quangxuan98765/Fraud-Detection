#!/usr/bin/env python3
"""
Final Fraud Detection: Ph∆∞∆°ng ph√°p k·∫øt h·ª£p t·ªëi ∆∞u cho ph√°t hi·ªán gian l·∫≠n
- C·∫£i thi·ªán c·∫£ precision v√† recall b·∫±ng c√°ch k·∫øt h·ª£p nhi·ªÅu k·ªπ thu·∫≠t
- Ph√¢n lo·∫°i giao d·ªãch theo c√°c m·ª©c ƒë·ªô tin c·∫≠y kh√°c nhau
- S·ª≠ d·ª•ng k·ªπ thu·∫≠t l·ªçc v√† t·ªëi ∆∞u h√≥a ƒë·ªÉ gi·∫£m false positives
"""

import os
import sys
import time
import argparse
import json
import numpy as np

# Th√™m th∆∞ m·ª•c g·ªëc v√†o sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from detector.database_manager import DatabaseManager
from detector.fraud_detector import FraudDetector
from detector.utils.config import NEO4J_URI, NEO4J_USER, NEO4J_PASSWORD

class FinalFraudDetection:
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        self.fraud_detector = FraudDetector(db_manager)
          # C·∫•u h√¨nh h·ªá th·ªëng t·ªëi ∆∞u cho dataset v·ªõi t·ª∑ l·ªá fraud 1.38%        
        self.config = {
            "percentile_cutoff": 0.99,
            "thresholds": {
                "very_high_anomaly": 0.165 * 1.02,    # 99th percentile v·ªõi ƒëi·ªÅu ch·ªânh
                "high_anomaly": 0.155 * 1.01,         # 97.5th percentile v·ªõi ƒëi·ªÅu ch·ªânh
                "medium_anomaly": 0.149,              # 95th percentile gi·ªØ nguy√™n
                "low_anomaly": 0.147 * 0.98,          # 90th percentile gi·∫£m nh·∫π cho recall t·ªët h∆°n
                "amount_high": 2095000,               # ~ 99th percentile amount t·ª´ dataset m·ªõi
                "amount_medium": 389600,              # ~ 90th percentile amount t·ª´ dataset m·ªõi
            },            
            "feature_weights": {
                "degScore": 0.38,                # Gi·ªØ nguy√™n - hi·ªáu su·∫•t t·ªët
                "hubScore": 0.22,                # TƒÉng th√™m - c√≥ hi·ªáu qu·∫£ cao trong ph√°t hi·ªán fraud
                "normCommunitySize": 0.18,       # TƒÉng th√™m - c√≥ t∆∞∆°ng quan m·∫°nh v·ªõi fraud
                "amountVolatility": 0.06,        # Gi·ªØ nguy√™n
                "txVelocity": 0.06,              # Gi·ªØ nguy√™n
                "btwScore": 0.04,                # Gi·∫£m nh·∫π
                "prScore": 0.03,                 # Gi·∫£m th√™m
                "authScore": 0.03                # Gi·∫£m th√™m
            },            
            "confidence_levels": {
                "very_high": 0.96,   # Gi·ªØ nguy√™n - ƒë√£ t·ªëi ∆∞u cho precision
                "high": 0.84,        # Gi·∫£m nh·∫π ƒë·ªÉ ph√π h·ª£p v·ªõi t·ª∑ l·ªá gian l·∫≠n cao h∆°n
                "medium": 0.72,      # Gi·∫£m nh·∫π ƒë·ªÉ ph√π h·ª£p v·ªõi t·ª∑ l·ªá gian l·∫≠n cao h∆°n
                "low": 0.56          # Gi·∫£m th√™m ƒë·ªÉ c·∫£i thi·ªán recall
            }
        }
    
    def run_detection(self, skip_basic_detection=False, balance_mode="balanced"):
        """
        Ch·∫°y ph√°t hi·ªán gian l·∫≠n t·ªëi ∆∞u.
        
        Args:
            skip_basic_detection: B·ªè qua b∆∞·ªõc ph√°t hi·ªán b·∫•t th∆∞·ªùng c∆° b·∫£n n·∫øu True
            balance_mode: Ch·∫ø ƒë·ªô c√¢n b·∫±ng gi·ªØa precision v√† recall
                          - "precision": ∆Øu ti√™n precision cao (√≠t false positives)
                          - "recall": ∆Øu ti√™n recall cao (√≠t false negatives)
                          - "balanced": C√¢n b·∫±ng gi·ªØa precision v√† recall
        """
        print(f"üîç FINAL FRAUD DETECTION - Ch·∫ø ƒë·ªô: {balance_mode}")
        
        start_time = time.time()
        
        # 1. Ch·∫°y ph√°t hi·ªán b·∫•t th∆∞·ªùng c∆° b·∫£n n·∫øu c·∫ßn
        if not skip_basic_detection:
            print("\nüîÑ B∆∞·ªõc 1: Ch·∫°y ph√°t hi·ªán b·∫•t th∆∞·ªùng c∆° b·∫£n...")
            
            # √Åp d·ª•ng tr·ªçng s·ªë ƒë√£ t·ªëi ∆∞u
            self.fraud_detector.feature_extractor.weights = self.config["feature_weights"]
              # Ch·∫°y pipeline v·ªõi ng∆∞·ª°ng ph√¢n v·ªã c·∫•u h√¨nh
            self.fraud_detector.run_pipeline(
                percentile_cutoff=self.config["percentile_cutoff"]
            )
        else:
            print("\n‚è© B·ªè qua B∆∞·ªõc 1: S·ª≠ d·ª•ng k·∫øt qu·∫£ ph√°t hi·ªán b·∫•t th∆∞·ªùng hi·ªán c√≥...")
            # Ki·ªÉm tra n·∫øu anomaly_score ƒë√£ t·ªìn t·∫°i
            check_query = """
            MATCH ()-[tx:SENT]->()
            WHERE tx.anomaly_score IS NOT NULL
            RETURN COUNT(tx) AS count
            """
            result = self.db_manager.run_query(check_query)
            if result and result.get("count", 0) > 0:
                print(f"  ‚úÖ ƒê√£ t√¨m th·∫•y {result.get('count', 0)} giao d·ªãch c√≥ anomaly_score")
            else:
                print("  ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y giao d·ªãch n√†o c√≥ anomaly_score. C·∫ßn ch·∫°y b∆∞·ªõc 1.")
                return
        
        # 2. L·∫•y th√¥ng tin th·ªëng k√™
        print("\nüîÑ B∆∞·ªõc 2: Ph√¢n t√≠ch th·ªëng k√™ giao d·ªãch...")
        stats = self._calculate_statistics()
        
        # 3. Reset tr·∫°ng th√°i ƒë√°nh d·∫•u
        self._reset_flags()
        
        # 4. Ph√°t hi·ªán gian l·∫≠n theo c·∫•p ƒë·ªô ƒë·ªô tin c·∫≠y
        print("\nüîÑ B∆∞·ªõc 3: Ph√°t hi·ªán gian l·∫≠n theo ƒë·ªô tin c·∫≠y...")
        
        # 4.1. Ph√°t hi·ªán gian l·∫≠n ƒë·ªô tin c·∫≠y r·∫•t cao
        self._detect_very_high_confidence_fraud(stats)
        
        # 4.2. Ph√°t hi·ªán gian l·∫≠n ƒë·ªô tin c·∫≠y cao
        self._detect_high_confidence_fraud(stats)
        
        # 4.3. Ph√°t hi·ªán gian l·∫≠n ƒë·ªô tin c·∫≠y trung b√¨nh
        self._detect_medium_confidence_fraud(stats)
        
        # 4.4. Ph√°t hi·ªán gian l·∫≠n ƒë·ªô tin c·∫≠y th·∫•p (ch·ªâ √°p d·ª•ng cho ch·∫ø ƒë·ªô ∆∞u ti√™n recall)
        if balance_mode == "recall":
            self._detect_low_confidence_fraud(stats)
        
        # 5. Ph√°t hi·ªán gian l·∫≠n d·ª±a tr√™n m·ªëi quan h·ªá
        print("\nüîÑ B∆∞·ªõc 4: Ph√°t hi·ªán gian l·∫≠n li√™n quan...")
        self._detect_related_fraud(stats)
          
        # 6. L·ªçc false positives n·∫øu ∆∞u ti√™n precision ho·∫∑c l·ªçc c√°c tr∆∞·ªùng h·ª£p r√µ r√†ng cho ch·∫ø ƒë·ªô recall
        if balance_mode == "precision":
            print("\nüîÑ B∆∞·ªõc 5: L·ªçc c√°c false positives (precision-focused)...")
            self._filter_false_positives(stats)
        elif balance_mode == "recall":
            print("\nüîÑ B∆∞·ªõc 5: L·ªçc c√°c false positives c∆° b·∫£n (recall-focused)...")
            self._filter_basic_false_positives(stats)
            self._apply_statistical_refinement(stats)
        
        # 7. ƒê√°nh gi√° k·∫øt qu·∫£
        print("\nüîÑ B∆∞·ªõc 6: ƒê√°nh gi√° k·∫øt qu·∫£ ph√°t hi·ªán...")
        metrics = self._evaluate_results(balance_mode)
        
        # 8. Ph√¢n t√≠ch chi ti·∫øt c√°c giao d·ªãch gian l·∫≠n
        print("\nüîÑ B∆∞·ªõc 7: Ph√¢n t√≠ch chi ti·∫øt giao d·ªãch gian l·∫≠n...")
        self._analyze_fraud_details()
        
        end_time = time.time()
        execution_time = end_time - start_time
        print(f"\n‚è±Ô∏è Th·ªùi gian th·ª±c thi: {execution_time:.2f} gi√¢y")
        
        return metrics
    
    def _calculate_statistics(self):
        """T√≠nh to√°n c√°c th·ªëng k√™ c·∫ßn thi·∫øt cho ph√°t hi·ªán."""
        
        stats_query = """
        MATCH ()-[tx:SENT]->()
        WITH 
            percentileCont(tx.anomaly_score, 0.99) AS very_high_threshold,
            percentileCont(tx.anomaly_score, 0.975) AS high_threshold,
            percentileCont(tx.anomaly_score, 0.95) AS medium_threshold,
            percentileCont(tx.anomaly_score, 0.90) AS low_threshold,
            percentileCont(tx.amount, 0.99) AS high_amount,
            percentileCont(tx.amount, 0.90) AS medium_amount,
            AVG(tx.amount) as avg_amount,
            STDEV(tx.amount) as std_amount,
            COUNT(*) as total_transactions,
            SUM(CASE WHEN tx.ground_truth_fraud = true THEN 1 ELSE 0 END) as fraud_count
        RETURN 
            very_high_threshold,
            high_threshold,
            medium_threshold, 
            low_threshold,
            high_amount,
            medium_amount,
            avg_amount,
            std_amount,
            total_transactions,
            fraud_count
        """
        
        result = self.db_manager.run_query(stats_query)
        
        if not result:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ t√≠nh to√°n th·ªëng k√™ giao d·ªãch")
            return {}
        
        # C·∫≠p nh·∫≠t th√¥ng s·ªë c·∫•u h√¨nh d·ª±a tr√™n d·ªØ li·ªáu
        self.config["thresholds"]["very_high_anomaly"] = result["very_high_threshold"]
        self.config["thresholds"]["high_anomaly"] = result["high_threshold"]
        self.config["thresholds"]["medium_anomaly"] = result["medium_threshold"]
        self.config["thresholds"]["low_anomaly"] = result["low_threshold"]
        self.config["thresholds"]["amount_high"] = result["high_amount"]
        self.config["thresholds"]["amount_medium"] = result["medium_amount"]
        
        # Hi·ªÉn th·ªã th√¥ng tin th·ªëng k√™
        print(f"üìä Th√¥ng tin th·ªëng k√™ giao d·ªãch:")
        print(f"  ‚Ä¢ T·ªïng s·ªë giao d·ªãch: {result.get('total_transactions', 0)}")
        print(f"  ‚Ä¢ T·ªïng s·ªë giao d·ªãch gian l·∫≠n: {result.get('fraud_count', 0)}")
        print(f"  ‚Ä¢ T·ª∑ l·ªá gian l·∫≠n: {result.get('fraud_count', 0) / result.get('total_transactions', 1) * 100:.4f}%")
        print(f"  ‚Ä¢ Ng∆∞·ª°ng anomaly score r·∫•t cao (99%): {result.get('very_high_threshold', 0):.6f}")
        print(f"  ‚Ä¢ Ng∆∞·ª°ng anomaly score cao (97.5%): {result.get('high_threshold', 0):.6f}")
        print(f"  ‚Ä¢ Ng∆∞·ª°ng anomaly score trung b√¨nh (95%): {result.get('medium_threshold', 0):.6f}")
        print(f"  ‚Ä¢ Ng∆∞·ª°ng anomaly score th·∫•p (90%): {result.get('low_threshold', 0):.6f}")
        print(f"  ‚Ä¢ Gi√° tr·ªã giao d·ªãch trung b√¨nh: {result.get('avg_amount', 0):.2f}")
        print(f"  ‚Ä¢ Ng∆∞·ª°ng gi√° tr·ªã cao (99%): {result.get('high_amount', 0):.2f}")
        print(f"  ‚Ä¢ Ng∆∞·ª°ng gi√° tr·ªã trung b√¨nh (90%): {result.get('medium_amount', 0):.2f}")
        
        return result
    
    def _reset_flags(self):
        """Reset tr·∫°ng th√°i ƒë√°nh d·∫•u."""
        print("  - ƒêang reset tr·∫°ng th√°i ƒë√°nh d·∫•u...")
        
        reset_query = """
        MATCH ()-[tx:SENT]->()
        SET tx.flagged = false, 
            tx.confidence = null, 
            tx.flag_reason = null
            
        WITH count(tx) AS reset_count
        
        // Reset account flags
        MATCH (acc:Account)
        SET acc.suspicious = null,
            acc.suspicious_count = null,
            acc.fraud_risk = null
            
        RETURN reset_count
        """
        reset_result = self.db_manager.run_query(reset_query)
        
        # Handle both list and dictionary results
        reset_count = 0
        if reset_result:
            if isinstance(reset_result, dict):
                reset_count = reset_result.get("reset_count", 0)
            elif isinstance(reset_result, list) and len(reset_result) > 0:
                reset_count = reset_result[0].get("reset_count", 0) if isinstance(reset_result[0], dict) else 0
                
        print(f"    ‚úÖ ƒê√£ reset {reset_count} giao d·ªãch v√† c√°c t√†i kho·∫£n li√™n quan")
        
    def _apply_statistical_refinement(self, stats):
        """√Åp d·ª•ng ph√¢n t√≠ch th·ªëng k√™ n√¢ng cao ƒë·ªÉ t·ªëi ∆∞u k·∫øt qu·∫£ ch·∫ø ƒë·ªô recall."""
        print("  - Ti·∫øn h√†nh ph√¢n t√≠ch hi·ªáu qu·∫£ ph√°t hi·ªán v√† l·ªçc th√™m...")
        
        # L·ªçc d·ª±a tr√™n anomaly score th·∫•p v√† c√°c ƒë·∫∑c tr∆∞ng kh√°c kh√¥ng n·ªïi b·∫≠t
        basic_filter_query = """
        MATCH (src:Account)-[tx:SENT]->(dest:Account)
        WHERE 
            tx.flagged = true AND
            tx.detection_rule IS NOT NULL AND
            tx.anomaly_score < $medium_threshold * 0.85 AND
            tx.amount < $avg_amount * 1.5 AND
            (src.hubScore IS NULL OR src.hubScore < 0.5) AND
            (src.degScore IS NULL OR src.degScore < 0.5)
        
        SET tx.flagged = false,
            tx.filtered = true, 
            tx.filter_reason = "Statistical refinement - low scores"
            
        RETURN count(tx) as filtered_count
        """
        
        params = {
            "medium_threshold": self.config["thresholds"]["medium_anomaly"],
            "avg_amount": stats["avg_amount"]
        }
        
        result = self.db_manager.run_query(basic_filter_query, params)
        filtered_count = result.get("filtered_count", 0) if result else 0
        print(f"    ‚úÖ ƒê√£ l·ªçc b·ªè {filtered_count} giao d·ªãch d·ª±a tr√™n ƒëi·ªÉm s·ªë th·∫•p")
        
        # L·ªçc d·ª±a tr√™n m·∫´u ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
        normal_pattern_query = """
        MATCH (src:Account)-[tx:SENT]->(dest:Account)
        WHERE 
            tx.flagged = true AND
            // Giao d·ªãch c√≥ m·∫´u ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
            tx.amount <= $avg_amount * 0.8 AND
            tx.anomaly_score < $medium_threshold * 0.9 AND
            src.txCount > 5 // T√†i kho·∫£n c√≥ nhi·ªÅu giao d·ªãch l·ªãch s·ª≠
        
        SET tx.flagged = false,
            tx.filtered = true,
            tx.filter_reason = "Normal activity pattern"
            
        RETURN count(tx) as filtered_count
        """
        
        result = self.db_manager.run_query(normal_pattern_query, params)
        filtered_count = result.get("filtered_count", 0) if result else 0
        print(f"    ‚úÖ ƒê√£ l·ªçc b·ªè {filtered_count} giao d·ªãch c√≥ m·∫´u ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng")
        
        # L·ªçc d·ª±a tr√™n th·ªùi gian giao d·ªãch        
        time_pattern_query = """
        MATCH (src:Account)-[tx:SENT]->(dest:Account)        WHERE 
            tx.flagged = true AND
            src.stdTimeBetweenTx IS NOT NULL AND
            src.stdTimeBetweenTx < 0.25 AND
            tx.anomaly_score < $medium_threshold
        
        SET tx.flagged = false,
            tx.filtered = true,
            tx.filter_reason = "Normal time pattern"
            
        RETURN count(tx) as filtered_count
        """
        
        result = self.db_manager.run_query(time_pattern_query, params)
        filtered_count = result.get("filtered_count", 0) if result else 0
        print(f"    ‚úÖ ƒê√£ l·ªçc b·ªè {filtered_count} giao d·ªãch c√≥ m·∫´u th·ªùi gian b√¨nh th∆∞·ªùng")
    
    def _detect_very_high_confidence_fraud(self, stats):
        """Ph√°t hi·ªán gian l·∫≠n v·ªõi ƒë·ªô tin c·∫≠y r·∫•t cao."""
        print("  - Ph√°t hi·ªán gian l·∫≠n v·ªõi ƒë·ªô tin c·∫≠y r·∫•t cao...")
        very_high_query = """
        MATCH (src:Account)-[tx:SENT]->(dest:Account)
        WHERE            // ƒêi·ªÉm anomaly c·ª±c cao - ƒë√£ ch·ª©ng minh precision t·ªët nh·∫•t (29.33%)
            tx.anomaly_score >= $very_high_threshold * 1.08
            
            // HO·∫∂C ƒëi·ªÉm anomaly cao (ng∆∞·ª°ng 99%) K·∫æT H·ª¢P v·ªõi c·∫•u tr√∫c ƒë·ªì th·ªã ƒë√°ng ng·ªù cao
            OR (tx.anomaly_score >= $very_high_threshold AND 
                (
                    // L√† hub node c√≥ k·∫øt n·ªëi cao
                    (src.hubScore IS NOT NULL AND src.hubScore >= 0.85) OR
                      // N·∫±m trong c·ªông ƒë·ªìng nh·ªè ƒë√°ng ng·ªù - c·∫£i thi·ªán cho dataset m·ªõi
                    (src.normCommunitySize IS NOT NULL AND src.normCommunitySize <= 0.04)
                )
            )
            
            // HO·∫∂C ƒëi·ªÉm anomaly cao (ng∆∞·ª°ng 99%) K·∫æT H·ª¢P v·ªõi gi√° tr·ªã giao d·ªãch r·∫•t cao
            OR (tx.anomaly_score >= $very_high_threshold AND tx.amount >= $amount_high * 1.3)
              SET tx.flagged = true,
            tx.confidence = $very_high_confidence,
            tx.flag_reason = CASE
                WHEN tx.anomaly_score >= $very_high_threshold * 1.08 THEN "ƒêi·ªÉm anomaly c·ª±c cao"
                WHEN tx.amount >= $amount_high * 1.2 THEN "ƒêi·ªÉm anomaly cao + gi√° tr·ªã giao d·ªãch r·∫•t cao"
                ELSE "ƒêi·ªÉm anomaly cao + c·∫•u tr√∫c ƒë·ªì th·ªã r·∫•t ƒë√°ng ng·ªù"
            END,
            tx.detection_rule = "very_high_confidence"
            
        RETURN count(tx) as flagged_count
        """
        
        params = {
            "very_high_threshold": self.config["thresholds"]["very_high_anomaly"],
            "high_threshold": self.config["thresholds"]["high_anomaly"],
            "amount_high": self.config["thresholds"]["amount_high"],
            "very_high_confidence": self.config["confidence_levels"]["very_high"]
        }
        
        result = self.db_manager.run_query(very_high_query, params)
        flagged_count = result.get("flagged_count", 0) if result else 0
        print(f"    ‚úÖ ƒê√£ ƒë√°nh d·∫•u {flagged_count} giao d·ªãch c√≥ ƒë·ªô tin c·∫≠y r·∫•t cao")
    
    def _detect_high_confidence_fraud(self, stats):
        """Ph√°t hi·ªán gian l·∫≠n v·ªõi ƒë·ªô tin c·∫≠y cao."""
        print("  - Ph√°t hi·ªán gian l·∫≠n v·ªõi ƒë·ªô tin c·∫≠y cao...")
        
        high_confidence_query = """
        MATCH (src:Account)-[tx:SENT]->(dest:Account)
        WHERE tx.flagged = false AND
        (
            // ƒêi·ªÉm anomaly cao (ng∆∞·ª°ng 97.5%)
            tx.anomaly_score >= $high_threshold
            
            // HO·∫∂C ƒëi·ªÉm anomaly trung b√¨nh (ng∆∞·ª°ng 95%) K·∫æT H·ª¢P v·ªõi c·∫•u tr√∫c ƒë·ªì th·ªã ƒë√°ng ng·ªù
            OR (tx.anomaly_score >= $medium_threshold AND 
                (
                    // Ch·ªâ s·ªë trung t√¢m cao
                    (src.hubScore IS NOT NULL AND src.hubScore >= 0.7) OR
                    (src.degScore IS NOT NULL AND src.degScore >= 0.7) OR
                    
                    // N·∫±m trong c·ªông ƒë·ªìng nh·ªè b·∫•t th∆∞·ªùng
                    (src.normCommunitySize IS NOT NULL AND src.normCommunitySize <= 0.15) OR
                    
                    // Ho·∫°t ƒë·ªông b·∫•t th∆∞·ªùng v·ªÅ th·ªùi gian
                    (src.tempBurst IS NOT NULL AND src.tempBurst >= 0.7)
                )
            )
            
            // HO·∫∂C ƒëi·ªÉm anomaly trung b√¨nh K·∫æT H·ª¢P v·ªõi gi√° tr·ªã giao d·ªãch cao
            OR (tx.anomaly_score >= $medium_threshold AND tx.amount >= $amount_medium * 1.5)
        )
        
        SET tx.flagged = true,
            tx.confidence = $high_confidence,
            tx.flag_reason = CASE
                WHEN tx.anomaly_score >= $high_threshold THEN "ƒêi·ªÉm anomaly cao"
                WHEN tx.amount >= $amount_medium * 1.5 THEN "ƒêi·ªÉm anomaly trung b√¨nh + gi√° tr·ªã giao d·ªãch cao"
                ELSE "ƒêi·ªÉm anomaly trung b√¨nh + c·∫•u tr√∫c ƒë·ªì th·ªã ƒë√°ng ng·ªù"
            END,
            // Th√™m nh√£n ƒë·ªÉ ph√¢n t√≠ch
            tx.detection_rule = "high_confidence"
            
        RETURN count(tx) as flagged_count
        """
        
        params = {
            "high_threshold": self.config["thresholds"]["high_anomaly"],
            "medium_threshold": self.config["thresholds"]["medium_anomaly"],
            "amount_medium": self.config["thresholds"]["amount_medium"],
            "high_confidence": self.config["confidence_levels"]["high"]
        }
        
        result = self.db_manager.run_query(high_confidence_query, params)
        flagged_count = result.get("flagged_count", 0) if result else 0
        print(f"    ‚úÖ ƒê√£ ƒë√°nh d·∫•u {flagged_count} giao d·ªãch c√≥ ƒë·ªô tin c·∫≠y cao")
    
    def _detect_medium_confidence_fraud(self, stats):
        """Ph√°t hi·ªán gian l·∫≠n v·ªõi ƒë·ªô tin c·∫≠y trung b√¨nh."""
        print("  - Ph√°t hi·ªán gian l·∫≠n v·ªõi ƒë·ªô tin c·∫≠y trung b√¨nh...")
        
        medium_confidence_query = """
        MATCH (src:Account)-[tx:SENT]->(dest:Account)
        WHERE tx.flagged = false AND
        (
            // ƒêi·ªÉm anomaly trung b√¨nh 
            tx.anomaly_score >= $medium_threshold
            
            // HO·∫∂C ƒëi·ªÉm anomaly th·∫•p K·∫æT H·ª¢P v·ªõi c√°c m·∫´u ƒë√°ng ng·ªù
            OR (tx.anomaly_score >= $low_threshold AND 
                (
                    // Gi√° tr·ªã giao d·ªãch cao h∆°n trung b√¨nh
                    tx.amount >= $avg_amount * 2 OR
                    
                    // Ch·ªâ s·ªë ƒë·ªì th·ªã ƒë√°ng ng·ªù
                    (src.hubScore IS NOT NULL AND src.hubScore >= 0.6) OR
                    (src.degScore IS NOT NULL AND src.degScore >= 0.6) OR
                    
                    // V·∫≠n t·ªëc giao d·ªãch cao
                    (src.txVelocity IS NOT NULL AND src.txVelocity >= 0.7)
                )
            )
        )
        
        SET tx.flagged = true,
            tx.confidence = $medium_confidence,
            tx.flag_reason = CASE
                WHEN tx.anomaly_score >= $medium_threshold THEN "ƒêi·ªÉm anomaly trung b√¨nh"
                WHEN tx.amount >= $avg_amount * 2 THEN "ƒêi·ªÉm anomaly th·∫•p + gi√° tr·ªã giao d·ªãch cao"
                WHEN src.txVelocity IS NOT NULL AND src.txVelocity >= 0.7 THEN "ƒêi·ªÉm anomaly th·∫•p + v·∫≠n t·ªëc giao d·ªãch cao"
                ELSE "ƒêi·ªÉm anomaly th·∫•p + ch·ªâ s·ªë ƒë·ªì th·ªã ƒë√°ng ng·ªù"
            END,
            // Th√™m nh√£n ƒë·ªÉ ph√¢n t√≠ch
            tx.detection_rule = "medium_confidence"
            
        RETURN count(tx) as flagged_count
        """
        
        params = {
            "medium_threshold": self.config["thresholds"]["medium_anomaly"],
            "low_threshold": self.config["thresholds"]["low_anomaly"],
            "avg_amount": stats["avg_amount"],
            "medium_confidence": self.config["confidence_levels"]["medium"]
        }
        
        result = self.db_manager.run_query(medium_confidence_query, params)
        flagged_count = result.get("flagged_count", 0) if result else 0
        print(f"    ‚úÖ ƒê√£ ƒë√°nh d·∫•u {flagged_count} giao d·ªãch c√≥ ƒë·ªô tin c·∫≠y trung b√¨nh")
    
    def _detect_low_confidence_fraud(self, stats):
        """Ph√°t hi·ªán gian l·∫≠n v·ªõi ƒë·ªô tin c·∫≠y th·∫•p - s·ª≠a ƒë·ªïi ƒë·ªÉ gi·∫£m false positives."""
        print("  - Ph√°t hi·ªán gian l·∫≠n v·ªõi ƒë·ªô tin c·∫≠y th·∫•p (recall-focused)...")
        
        low_confidence_query = """
        MATCH (src:Account)-[tx:SENT]->(dest:Account)
        WHERE tx.flagged = false AND
        (
            // K·∫øt h·ª£p nhi·ªÅu y·∫øu t·ªë b·∫•t th∆∞·ªùng thay v√¨ ch·ªâ d·ª±a v√†o ƒëi·ªÉm anomaly
            (tx.anomaly_score >= $medium_threshold * 0.95 AND 
                (
                    // Gi√° tr·ªã giao d·ªãch cao
                    tx.amount >= $avg_amount * 3 OR
                    
                    // K·∫øt h·ª£p ch·ªâ s·ªë ƒë·ªì th·ªã v√† th·ªùi gian b·∫•t th∆∞·ªùng
                    (
                        (src.hubScore IS NOT NULL AND src.hubScore >= 0.5) AND
                        (src.txVelocity IS NOT NULL AND src.txVelocity >= 0.5)
                    ) OR
                    
                    // C·∫•u tr√∫c c·ªông ƒë·ªìng ƒë√°ng ng·ªù
                    (
                        (src.normCommunitySize IS NOT NULL AND src.normCommunitySize <= 0.15) AND
                        tx.amount >= $avg_amount * 1.5
                    )
                )
            ) OR
            
            // Giao d·ªãch c√≥ gi√° tr·ªã r·∫•t cao k·∫øt h·ª£p v·ªõi anomaly score kh√¥ng qu√° th·∫•p
            (tx.amount >= $avg_amount * 8 AND tx.anomaly_score >= $low_threshold * 0.9) OR
            
            // Ho·∫°t ƒë·ªông giao d·ªãch v√¥ c√πng b·∫•t th∆∞·ªùng
            (tx.anomaly_score >= $medium_threshold * 0.9 AND src.txVelocity IS NOT NULL AND src.txVelocity >= 0.8)
        )
        
        SET tx.flagged = true,
            tx.confidence = $low_confidence,
            tx.flag_reason = CASE
                WHEN tx.amount >= $avg_amount * 8 THEN "Gi√° tr·ªã giao d·ªãch c·ª±c cao"
                WHEN src.txVelocity IS NOT NULL AND src.txVelocity >= 0.8 THEN "V·∫≠n t·ªëc giao d·ªãch c·ª±c cao"
                ELSE "K·∫øt h·ª£p nhi·ªÅu y·∫øu t·ªë ƒë√°ng ng·ªù - ƒë·ªô tin c·∫≠y th·∫•p"
            END,
            tx.detection_rule = "low_confidence"
            
        RETURN count(tx) as flagged_count
        """
        
        params = {
            "low_threshold": self.config["thresholds"]["low_anomaly"],
            "medium_threshold": self.config["thresholds"]["medium_anomaly"],
            "avg_amount": stats["avg_amount"],
            "low_confidence": self.config["confidence_levels"]["low"]
        }
        
        result = self.db_manager.run_query(low_confidence_query, params)
        flagged_count = result.get("flagged_count", 0) if result else 0
        print(f"    ‚úÖ ƒê√£ ƒë√°nh d·∫•u {flagged_count} giao d·ªãch c√≥ ƒë·ªô tin c·∫≠y th·∫•p")
    
    def _detect_related_fraud(self, stats):
        """Ph√°t hi·ªán gian l·∫≠n d·ª±a tr√™n m·ªëi quan h·ªá v·ªõi c√°c giao d·ªãch gian l·∫≠n ƒë√£ bi·∫øt."""
        print("  - Ph√°t hi·ªán gian l·∫≠n d·ª±a tr√™n m·ªëi quan h·ªá...")
        
        # 1. ƒê√°nh d·∫•u t√†i kho·∫£n ƒë√°ng ng·ªù d·ª±a tr√™n giao d·ªãch gian l·∫≠n
        suspicious_account_query = """
        // ƒê√°nh d·∫•u t√†i kho·∫£n li√™n quan ƒë·∫øn giao d·ªãch gian l·∫≠n
        MATCH (acc:Account)-[tx:SENT]->() 
        WHERE tx.flagged = true AND tx.confidence >= $high_confidence
        
        WITH acc, count(tx) AS fraud_count
        
        SET acc.suspicious = true,
            acc.suspicious_count = fraud_count,
            acc.fraud_risk = CASE
                WHEN fraud_count >= 3 THEN "high"
                WHEN fraud_count = 2 THEN "medium"
                ELSE "low"
            END
            
        RETURN count(acc) as suspicious_accounts
        """
        
        params = {
            "high_confidence": self.config["confidence_levels"]["high"]
        }
        
        result = self.db_manager.run_query(suspicious_account_query, params)
        suspicious_accounts = result.get("suspicious_accounts", 0) if result else 0
        print(f"    ‚úÖ ƒê√£ ƒë√°nh d·∫•u {suspicious_accounts} t√†i kho·∫£n ƒë√°ng ng·ªù")
        
        # 2. T√¨m giao d·ªãch li√™n quan ƒë·∫øn t√†i kho·∫£n ƒë√°ng ng·ªù
        related_tx_query = """
        // T√¨m giao d·ªãch t·ª´ ho·∫∑c ƒë·∫øn t√†i kho·∫£n ƒë√°ng ng·ªù
        MATCH (src:Account)-[tx:SENT]->(dest:Account)
        WHERE 
            tx.flagged = false AND
            (
                // T·ª´ t√†i kho·∫£n ƒë√°ng ng·ªù HIGH c√≥ gi√° tr·ªã cao
                (src.suspicious = true AND src.fraud_risk = "high" AND 
                tx.anomaly_score >= $low_threshold * 0.8 AND
                tx.amount >= $avg_amount) OR
                
                // ƒê·∫øn t√†i kho·∫£n ƒë√°ng ng·ªù HIGH c√≥ gi√° tr·ªã cao
                (dest.suspicious = true AND dest.fraud_risk = "high" AND 
                tx.anomaly_score >= $low_threshold * 0.8 AND
                tx.amount >= $avg_amount) OR
                
                // Giao d·ªãch gi·ªØa hai t√†i kho·∫£n ƒë√°ng ng·ªù
                (src.suspicious = true AND dest.suspicious = true AND
                tx.anomaly_score >= $low_threshold * 0.7)
            )
        
        SET tx.flagged = true,
            tx.confidence = CASE
                WHEN src.fraud_risk = "high" OR dest.fraud_risk = "high" THEN 0.8
                ELSE 0.7
            END,
            tx.flag_reason = CASE
                WHEN src.suspicious = true AND dest.suspicious = true THEN "Giao d·ªãch gi·ªØa hai t√†i kho·∫£n ƒë√°ng ng·ªù"
                WHEN src.suspicious = true THEN "Giao d·ªãch t·ª´ t√†i kho·∫£n ƒë√°ng ng·ªù"
                ELSE "Giao d·ªãch ƒë·∫øn t√†i kho·∫£n ƒë√°ng ng·ªù"
            END,
            tx.detection_rule = "related_fraud"
            
        RETURN count(tx) as flagged_count
        """
        
        params = {
            "low_threshold": self.config["thresholds"]["low_anomaly"],
            "avg_amount": stats["avg_amount"]
        }
        
        result = self.db_manager.run_query(related_tx_query, params)        
        flagged_count = result.get("flagged_count", 0) if result else 0
        print(f"    ‚úÖ ƒê√£ ƒë√°nh d·∫•u {flagged_count} giao d·ªãch li√™n quan ƒë·∫øn t√†i kho·∫£n ƒë√°ng ng·ªù")
    
    def _filter_false_positives(self, stats):
        """L·ªçc c√°c false positives cho ch·∫ø ƒë·ªô precision cao."""
        print("  - L·ªçc c√°c giao d·ªãch c√≥ th·ªÉ l√† false positives...")
        
        filter_query = """
        // H·ªßy ƒë√°nh d·∫•u c√°c giao d·ªãch c√≥ kh·∫£ nƒÉng cao l√† false positive
        MATCH (src:Account)-[tx:SENT]->(dest:Account)
        WHERE 
            tx.flagged = true AND
            (
                // Giao d·ªãch c√≥ ƒë·ªô tin c·∫≠y th·∫•p v·ªõi c√°c ch·ªâ s·ªë b√¨nh th∆∞·ªùng
                (tx.confidence <= 0.72 AND
                    (
                        // Giao d·ªãch c√≥ gi√° tr·ªã b√¨nh th∆∞·ªùng
                        (tx.amount <= $avg_amount * 1.2 AND tx.anomaly_score <= $medium_threshold) OR
                        
                        // M·∫´u giao d·ªãch b√¨nh th∆∞·ªùng
                        (src.txVelocity IS NOT NULL AND src.txVelocity <= 0.3 AND tx.anomaly_score <= $medium_threshold) OR
                        
                        // C·∫•u tr√∫c ƒë·ªì th·ªã b√¨nh th∆∞·ªùng
                        (tx.detection_rule = "medium_confidence" AND
                         tx.anomaly_score <= $medium_threshold * 0.98 AND
                         (src.normCommunitySize IS NULL OR src.normCommunitySize >= 0.3))
                    )
                ) OR
                
                // Giao d·ªãch ƒë√£ ƒë∆∞·ª£c l·ªçc trong qu√° tr√¨nh ph√¢n t√≠ch
                (tx.confidence <= 0.8 AND
                    (
                        // C√°c ch·ªâ s·ªë ƒë·ªì th·ªã kh√¥ng ƒë·ªß cao
                        ((src.hubScore IS NULL OR src.hubScore < 0.5) AND
                         (src.degScore IS NULL OR src.degScore < 0.5) AND
                         tx.anomaly_score < $high_threshold * 0.95 AND
                         tx.amount < $amount_high * 0.5)
                    )
                )
            )
        
        SET tx.flagged = false,
            tx.filtered = true,
            tx.filter_reason = "L·ªçc b·ªè false positive ti·ªÅm nƒÉng"
            
        RETURN count(tx) as filtered_count
        """
        params = {
            "avg_amount": stats["avg_amount"],
            "medium_threshold": self.config["thresholds"]["medium_anomaly"],
            "high_threshold": self.config["thresholds"]["high_anomaly"],
            "low_threshold": self.config["thresholds"]["low_anomaly"],
            "amount_high": self.config["thresholds"]["amount_high"]
        }
        
        result = self.db_manager.run_query(filter_query, params)
        filtered_count = result.get("filtered_count", 0) if result else 0
        print(f"    ‚úÖ ƒê√£ l·ªçc b·ªè {filtered_count} false positives ti·ªÅm nƒÉng")
    
    def _filter_basic_false_positives(self, stats):
        """L·ªçc false positives m·∫°nh m·∫Ω cho ch·∫ø ƒë·ªô recall."""
        print("  - L·ªçc false positives m·∫°nh m·∫Ω cho ch·∫ø ƒë·ªô recall...")
        
        filter_query = """
        // L·ªçc c√°c giao d·ªãch c√≥ nhi·ªÅu kh·∫£ nƒÉng l√† false positive
        MATCH (src:Account)-[tx:SENT]->(dest:Account)
        WHERE 
            tx.flagged = true AND
            (
                // C√°c giao d·ªãch nh·ªè v·ªõi anomaly score th·∫•p
                (tx.amount <= $avg_amount * 0.5 AND tx.anomaly_score <= $medium_threshold) OR
                
                // Giao d·ªãch v·ªõi c√°c t√†i kho·∫£n c√≥ ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
                (
                    tx.confidence < 0.8 AND 
                    tx.anomaly_score < $medium_threshold AND
                    (src.txVelocity IS NULL OR src.txVelocity < 0.3) AND
                    (src.hubScore IS NULL OR src.hubScore < 0.3) AND
                    tx.amount < $avg_amount
                )
            )
        
        SET tx.flagged = false,
            tx.filtered = true,
            tx.filter_reason = "Enhanced recall mode filter"
            
        RETURN count(tx) as filtered_count
        """
        
        params = {
            "avg_amount": stats["avg_amount"],
            "medium_threshold": self.config["thresholds"]["medium_anomaly"]
        }
        
        result = self.db_manager.run_query(filter_query, params)
        filtered_count = result.get("filtered_count", 0) if result else 0
        print(f"    ‚úÖ ƒê√£ l·ªçc b·ªè {filtered_count} false positives trong ch·∫ø ƒë·ªô recall")
        
        # L·ªçc giao d·ªãch d·ª±a tr√™n ƒëi·ªÉm t·ªïng h·ª£p
        secondary_filter_query = """
        MATCH (src:Account)-[tx:SENT]->(dest:Account)
        WHERE 
            tx.flagged = true AND
            (
                // Giao d·ªãch kh√¥ng th·ª±c s·ª± ƒë√°ng ng·ªù d·ª±a tr√™n ƒëi·ªÉm t·ªïng h·ª£p
                (
                    // ƒêi·ªÉm anomaly kh√¥ng cao
                    tx.anomaly_score < $medium_threshold AND
                    
                    // V√† kh√¥ng c√≥ ch·ªâ s·ªë ƒë·∫∑c bi·ªát n√†o kh√°c n·ªïi tr·ªôi
                    (src.hubScore IS NULL OR src.hubScore < 0.4) AND
                    (src.degScore IS NULL OR src.degScore < 0.4) AND
                    (tx.amount < $avg_amount * 1.2)
                )
            )
        
        SET tx.flagged = false,
            tx.filtered = true,
            tx.filter_reason = "Combined features filter"
            
        RETURN count(tx) as filtered_count
        """
        
        result = self.db_manager.run_query(secondary_filter_query, params)
        filtered_count = result.get("filtered_count", 0) if result else 0
        print(f"    ‚úÖ ƒê√£ l·ªçc b·ªè th√™m {filtered_count} false positives th√¥ng qua ƒë√°nh gi√° t·ªïng h·ª£p")
    
    def _parse_record(self, record):
        """Parse record from Neo4j result."""
        try:
            # Tr∆∞·ªùng h·ª£p record l√† m·ªôt ƒë·ªëi t∆∞·ª£ng Neo4j Record
            if hasattr(record, "keys") and callable(getattr(record, "keys")):
                # Chuy·ªÉn ƒë·ªïi Record th√†nh dictionary
                return {key: record[key] for key in record.keys()}
            
            # Tr∆∞·ªùng h·ª£p ƒë√£ l√† dictionary
            if isinstance(record, dict):
                return record
            
            # Tr∆∞·ªùng h·ª£p record l√† m·ªôt ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ truy c·∫≠p theo t√™n thu·ªôc t√≠nh
            if hasattr(record, "get") and callable(getattr(record, "get")):
                # N·∫øu c√≥ ph∆∞∆°ng th·ª©c get(), gi·∫£ ƒë·ªãnh n√≥ ho·∫°t ƒë·ªông nh∆∞ dict
                return record
                
            # Tr∆∞·ªùng h·ª£p record c√≥ thu·ªôc t√≠nh ƒë·∫∑c bi·ªát
            if hasattr(record, "_properties"):
                # M·ªôt s·ªë ƒë·ªëi t∆∞·ª£ng Neo4j node/relationship c√≥ thu·ªôc t√≠nh _properties
                return record._properties
                
            # Ghi log v√† tr·∫£ v·ªÅ dictionary r·ªóng n·∫øu kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c
            print(f"  ‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu ki·ªÉu: {type(record)}")
            return {}
            
        except Exception as e:
            print(f"  ‚ö†Ô∏è L·ªói khi ph√¢n t√≠ch b·∫£n ghi: {str(e)}")
            return {}
    
    def _evaluate_results(self, mode="balanced"):
        """ƒê√°nh gi√° k·∫øt qu·∫£ ph√°t hi·ªán."""
        
        evaluation_query = """
        MATCH ()-[tx:SENT]->()
        WITH
            SUM(CASE WHEN tx.flagged = true AND tx.ground_truth_fraud = true THEN 1 ELSE 0 END) AS true_positives,
            SUM(CASE WHEN tx.flagged = true AND tx.ground_truth_fraud = false THEN 1 ELSE 0 END) AS false_positives,
            SUM(CASE WHEN tx.flagged = false AND tx.ground_truth_fraud = true THEN 1 ELSE 0 END) AS false_negatives,
            SUM(CASE WHEN tx.flagged = false AND tx.ground_truth_fraud = false THEN 1 ELSE 0 END) AS true_negatives,
            COUNT(*) AS total_transactions,
            SUM(CASE WHEN tx.ground_truth_fraud = true THEN 1 ELSE 0 END) AS total_fraud

        // T√≠nh precision v√† recall
        WITH
            true_positives, false_positives, false_negatives, true_negatives, 
            total_transactions, total_fraud,
            CASE WHEN (true_positives + false_positives) > 0 
                THEN toFloat(true_positives) / (true_positives + false_positives) 
                ELSE 0 
            END AS precision,
            CASE WHEN (true_positives + false_negatives) > 0 
                THEN toFloat(true_positives) / (true_positives + false_negatives) 
                ELSE 0 
            END AS recall

        // T√≠nh F1 score v√† accuracy
        WITH 
            true_positives, false_positives, false_negatives, true_negatives,
            total_transactions, total_fraud, precision, recall,
            CASE 
                WHEN (precision + recall) > 0 
                THEN 2 * precision * recall / (precision + recall) 
                ELSE 0 
            END AS f1_score,
            toFloat(true_positives + true_negatives) / total_transactions AS accuracy
            
        RETURN *
        """
        
        result = self.db_manager.run_query(evaluation_query)
        
        if not result:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë√°nh gi√° hi·ªáu su·∫•t")
            return None
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        print("\nüìä K·∫øt qu·∫£ ƒë√°nh gi√° hi·ªáu su·∫•t:")
        print(f"  ‚Ä¢ T·ªïng s·ªë giao d·ªãch: {result['total_transactions']}")
        print(f"  ‚Ä¢ T·ªïng s·ªë giao d·ªãch gian l·∫≠n th·ª±c t·∫ø: {result['total_fraud']}")
        print(f"  ‚Ä¢ S·ªë giao d·ªãch ƒë∆∞·ª£c ƒë√°nh d·∫•u: {result['true_positives'] + result['false_positives']}")
        print(f"  ‚Ä¢ True Positives: {result['true_positives']}")
        print(f"  ‚Ä¢ False Positives: {result['false_positives']}")
        print(f"  ‚Ä¢ False Negatives: {result['false_negatives']}")
        print(f"  ‚Ä¢ True Negatives: {result['true_negatives']}")
        print(f"  ‚Ä¢ Precision: {result['precision']:.4f}")
        print(f"  ‚Ä¢ Recall: {result['recall']:.4f}")
        print(f"  ‚Ä¢ F1 Score: {result['f1_score']:.4f}")
        print(f"  ‚Ä¢ Accuracy: {result['accuracy']:.4f}")    
        
        # Th√¥ng tin chi ti·∫øt ph√°t hi·ªán theo ƒë·ªô tin c·∫≠y        # Ph√¢n t√≠ch theo ƒë·ªô tin c·∫≠y - Simplified Version        # Ph√¢n t√≠ch theo ƒë·ªô tin c·∫≠y
        print("\nüìä Ph√¢n t√≠ch theo ƒë·ªô tin c·∫≠y:")
        
        confidence_query = """
        MATCH ()-[tx:SENT]->()
        WHERE tx.flagged = true
        WITH tx.confidence as confidence_level, 
             COUNT(tx) as flagged_count,
             SUM(CASE WHEN tx.ground_truth_fraud = true THEN 1 ELSE 0 END) as true_fraud
        RETURN 
            confidence_level,
            flagged_count,
            true_fraud,
            toFloat(true_fraud) / flagged_count as precision_rate
        ORDER BY confidence_level DESC
        """
        
        confidence_result = self.db_manager.run_query(confidence_query)
        if confidence_result:
            try:
                processed_items = []
                
                # Process results based on returned data structure
                if isinstance(confidence_result, list):
                    processed_items = confidence_result
                elif isinstance(confidence_result, dict):
                    processed_items = [confidence_result]
                    
                # Display results
                for item in processed_items:
                    confidence_level = item.get("confidence_level", 0)
                    flagged_count = item.get("flagged_count", 0)
                    true_fraud = item.get("true_fraud", 0)
                    precision_rate = item.get("precision_rate", 0)
                    
                    print(f"  ‚Ä¢ ƒê·ªô tin c·∫≠y {confidence_level:.2f}: {flagged_count} giao d·ªãch, {true_fraud} gian l·∫≠n th·ª±c s·ª±, precision {precision_rate:.4f}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch k·∫øt qu·∫£ ƒë·ªô tin c·∫≠y: {str(e)}")
        else:
            print("  ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√¢n t√≠ch ƒë·ªô tin c·∫≠y")
        
        # L∆∞u metrics
        metrics = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "model": f"final_fraud_detection_{mode}",
            "parameters": self.config,
            "metrics": {
                "true_positives": result['true_positives'],
                "false_positives": result['false_positives'],
                "false_negatives": result['false_negatives'],
                "true_negatives": result['true_negatives'],
                "total_transactions": result['total_transactions'],
                "total_fraud": result['total_fraud'],
                "precision": result['precision'],
                "recall": result['recall'],
                "f1_score": result['f1_score'],
                "accuracy": result['accuracy']
            }
        }
        
        # L∆∞u v√†o file
        filename = f"final_fraud_detection_{mode}_metrics.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(metrics, f, indent=2)
        print(f"\n‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o file {filename}")
        
        return metrics
    
    def _analyze_fraud_details(self):
        """Ph√¢n t√≠ch chi ti·∫øt c√°c giao d·ªãch gian l·∫≠n ƒë∆∞·ª£c ph√°t hi·ªán."""
        
        # Ph√¢n t√≠ch theo lo·∫°i quy t·∫Øc ph√°t hi·ªán
        print("\nüìä Ph√¢n t√≠ch theo quy t·∫Øc ph√°t hi·ªán:")
        
        rule_query = """
        MATCH ()-[tx:SENT]->()
        WHERE tx.flagged = true
        WITH tx.detection_rule as rule, 
             COUNT(tx) as flagged_count,
             SUM(CASE WHEN tx.ground_truth_fraud = true THEN 1 ELSE 0 END) as true_fraud
        RETURN 
            rule,
            flagged_count,
            true_fraud,
            toFloat(true_fraud) / flagged_count as precision_rate
        ORDER BY true_fraud DESC
        """
        
        rule_result = self.db_manager.run_query(rule_query)

        if rule_result:
            try:
                processed_rules = []
                
                # Process results based on returned data structure
                if isinstance(rule_result, list):
                    processed_rules = rule_result
                elif isinstance(rule_result, dict):
                    processed_rules = [rule_result]
                    
                # Display results
                for item in processed_rules:
                    rule_name = item.get("rule", "unknown")
                    flagged_count = item.get("flagged_count", 0)
                    true_fraud = item.get("true_fraud", 0)
                    precision_rate = item.get("precision_rate", 0)
                    
                    print(f"  ‚Ä¢ Quy t·∫Øc {rule_name}: {flagged_count} giao d·ªãch, {true_fraud} gian l·∫≠n th·ª±c s·ª±, precision {precision_rate:.4f}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è L·ªói khi ph√¢n t√≠ch k·∫øt qu·∫£ quy t·∫Øc: {str(e)}")
        else:
            print("  ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√¢n t√≠ch quy t·∫Øc ph√°t hi·ªán")
        
        # Ph√¢n t√≠ch theo l√Ω do ƒë√°nh d·∫•u
        print("\nüìä Top 5 l√Ω do ƒë√°nh d·∫•u gian l·∫≠n hi·ªáu qu·∫£ nh·∫•t:")
        
        reason_query = """
        MATCH ()-[tx:SENT]->()
        WHERE tx.flagged = true
        WITH tx.flag_reason as reason, 
             COUNT(tx) as flagged_count,
             SUM(CASE WHEN tx.ground_truth_fraud = true THEN 1 ELSE 0 END) as true_fraud
        RETURN 
            reason,
            flagged_count,
            true_fraud,
            toFloat(true_fraud) / flagged_count as precision_rate
        ORDER BY true_fraud DESC
        LIMIT 5
        """
        
        reason_result = self.db_manager.run_query(reason_query)
        if reason_result:
            try:
                processed_reasons = []
                
                # Process results based on returned data structure
                if isinstance(reason_result, list):
                    processed_reasons = reason_result
                elif isinstance(reason_result, dict):
                    processed_reasons = [reason_result]
                    
                # Display results
                for item in processed_reasons:
                    reason_text = item.get("reason", "unknown")
                    flagged_count = item.get("flagged_count", 0)
                    true_fraud = item.get("true_fraud", 0)
                    precision_rate = item.get("precision_rate", 0)
                    
                    print(f"  ‚Ä¢ {reason_text}: {flagged_count} giao d·ªãch, {true_fraud} gian l·∫≠n th·ª±c s·ª±, precision {precision_rate:.4f}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è L·ªói khi ph√¢n t√≠ch k·∫øt qu·∫£ l√Ω do: {str(e)}")
        else:
            print("  ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√¢n t√≠ch l√Ω do ƒë√°nh d·∫•u")

def main():
    parser = argparse.ArgumentParser(description='H·ªá th·ªëng ph√°t hi·ªán gian l·∫≠n cu·ªëi c√πng')
    
    parser.add_argument('--skip-basic', action='store_true',
                      help='B·ªè qua b∆∞·ªõc ph√°t hi·ªán b·∫•t th∆∞·ªùng c∆° b·∫£n (s·ª≠ d·ª•ng k·∫øt qu·∫£ hi·ªán c√≥)')
                      
    parser.add_argument('--mode', type=str, choices=['precision', 'recall', 'balanced'],
                      default='balanced',
                      help='Ch·∫ø ƒë·ªô c√¢n b·∫±ng gi·ªØa precision v√† recall (m·∫∑c ƒë·ªãnh: balanced)')
    
    args = parser.parse_args()
    
    # K·∫øt n·ªëi Neo4j
    try:
        print("üîå ƒêang k·∫øt n·ªëi ƒë·∫øn Neo4j...")
        db_manager = DatabaseManager(NEO4J_URI, NEO4J_USER, NEO4J_PASSWORD)
        detector = FinalFraudDetection(db_manager)
        
        # Ch·∫°y ph√°t hi·ªán
        detector.run_detection(
            skip_basic_detection=args.skip_basic,
            balance_mode=args.mode
        )
        
    except Exception as e:
        print(f"L·ªói: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
