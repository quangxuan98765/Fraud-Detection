from config import FRAUD_SCORE_THRESHOLD, SUSPICIOUS_THRESHOLD

class AccountAnalyzer:
    def __init__(self, driver):
        self.driver = driver

    def process_account_behaviors(self):
        """ƒê√°nh d·∫•u h√†nh vi b·∫•t th∆∞·ªùng theo batch v·ªõi ti√™u ch√≠ ch·∫∑t ch·∫Ω h∆°n ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c"""
        with self.driver.session() as session:
            print("üîç ƒêang ƒë√°nh d·∫•u h√†nh vi b·∫•t th∆∞·ªùng (ph∆∞∆°ng ph√°p t·ªëi ∆∞u)...")
            
            # L·∫•y t·ªïng s·ªë t√†i kho·∫£n
            total = session.run("MATCH (a:Account) RETURN count(a) AS count").single()["count"]
            print(f"  T·ªïng s·ªë t√†i kho·∫£n c·∫ßn ph√¢n t√≠ch: {total}")
            
            # X√°c ƒë·ªãnh k√≠ch th∆∞·ªõc batch
            batch_size = 1000
            total_batches = (total + batch_size - 1) // batch_size
            
            # X·ª≠ l√Ω theo batch v·ªõi ti√™u ch√≠ ch·∫∑t ch·∫Ω h∆°n
            for i in range(total_batches):
                start = i * batch_size
                
                # Truy v·∫•n theo batch v·ªõi c√°c ti√™u ch√≠ m·ªõi
                query = """
                    MATCH (a:Account)
                    WITH a ORDER BY id(a)
                    SKIP $skip LIMIT $limit
                    
                    WHERE a.out_count IS NOT NULL AND a.in_count IS NOT NULL
                    WITH a, 
                        COALESCE(a.out_count, 0) AS outCount, 
                        COALESCE(a.in_count, 0) AS inCount,
                        COALESCE(a.out_amount, 0) AS outAmount,
                        COALESCE(a.in_amount, 0) AS inAmount
                        
                    // T√≠nh ch√™nh l·ªách s·ªë l∆∞·ª£ng v√† gi√° tr·ªã giao d·ªãch
                    WITH a, outCount, inCount, outAmount, inAmount,
                         abs(outCount - inCount) AS txDiff,
                         abs(outAmount - inAmount) AS amountDiff
                      // G√°n c√°c ch·ªâ s·ªë b·∫•t th∆∞·ªùng v·ªõi ƒëi·ªÅu ki·ªán nghi√™m ng·∫∑t h∆°n 
                    SET a.tx_imbalance = CASE 
                            WHEN outCount + inCount < 4 THEN 0  // Y√™u c·∫ßu t·ªëi thi·ªÉu 4 giao d·ªãch
                            WHEN outCount + inCount = 0 THEN 0
                            ELSE txDiff / (outCount + inCount)
                        END,
                        a.amount_imbalance = CASE
                            WHEN outAmount + inAmount = 0 THEN 0
                            WHEN outAmount + inAmount < 80000 THEN 0  // TƒÉng ng∆∞·ª°ng t·ªïng gi√° tr·ªã giao d·ªãch
                            ELSE amountDiff / (outAmount + inAmount)
                        END,
                        a.only_sender = CASE 
                            WHEN outCount >= 4 AND inCount = 0 THEN true  // TƒÉng s·ªë l∆∞·ª£ng giao d·ªãch ra t·ªëi thi·ªÉu
                            ELSE false 
                        END,
                        a.high_tx_volume = CASE 
                            WHEN outCount + inCount > 10 THEN true  // TƒÉng ng∆∞·ª°ng s·ªë l∆∞·ª£ng giao d·ªãch
                            ELSE false 
                        END
                        
                    RETURN count(*) as processed
                """
                
                # Th·ª±c thi truy v·∫•n
                result = session.run(query, skip=start, limit=batch_size).single()
                processed = result["processed"] if result else 0

    def process_transaction_anomalies(self):
        """Ph√¢n t√≠ch giao d·ªãch b·∫•t th∆∞·ªùng theo batch v·ªõi ti√™u ch√≠ ch·∫∑t ch·∫Ω h∆°n"""
        with self.driver.session() as session:
            print("üîç ƒêang ph√¢n t√≠ch giao d·ªãch c√≥ gi√° tr·ªã b·∫•t th∆∞·ªùng...")
            
            # L·∫•y t·ªïng s·ªë t√†i kho·∫£n
            total = session.run("MATCH (a:Account) RETURN count(a) AS count").single()["count"]
            batch_size = 1000
            total_batches = (total + batch_size - 1) // batch_size
            
            # X√≥a ƒë√°nh d·∫•u c≈©
            session.run("MATCH (a:Account) REMOVE a.tx_anomaly")

            # Ph√¢n t√≠ch theo batch v·ªõi ti√™u ch√≠ ch·∫∑t ch·∫Ω h∆°n
            for i in range(total_batches):
                start = i * batch_size
                query = """
                    MATCH (a:Account)
                    WITH a ORDER BY id(a)
                    SKIP $skip LIMIT $limit
                    
                    WITH a
                    OPTIONAL MATCH (a)-[tx:SENT]->()
                    WITH a, avg(tx.amount) AS avgAmount, max(tx.amount) AS maxAmount, count(tx) AS txCount,
                        collect(tx.amount) as amounts
                    WHERE txCount >= 3 AND (
                        // TƒÉng ng∆∞·ª°ng ph√°t hi·ªán b·∫•t th∆∞·ªùng
                        (maxAmount > avgAmount * 8 AND maxAmount > 80000 AND txCount >= 4) OR
                        // TƒÉng ng∆∞·ª°ng giao d·ªãch gi√° tr·ªã cao
                        (maxAmount > 200000 AND avgAmount < 40000 AND txCount >= 3) OR
                        // Y√™u c·∫ßu nhi·ªÅu giao d·ªãch b·∫•t th∆∞·ªùng h∆°n
                        (size([x in amounts WHERE x > avgAmount * 5]) >= 3 AND 
                        txCount >= 4 AND 
                        maxAmount > avgAmount * 6) OR
                        // TƒÉng s·ªë l∆∞·ª£ng giao d·ªãch gi√° tr·ªã cao c·∫ßn thi·∫øt
                        (size([x in amounts WHERE x > 80000]) >= 3 AND
                        avgAmount < 25000 AND
                        txCount >= 3)
                    )                    
                    SET a.tx_anomaly = true
                    RETURN count(*) as processed
                """
                
                result = session.run(query, skip=start, limit=batch_size).single()
                processed = result["processed"] if result else 0            # X√°c ƒë·ªãnh t√†i kho·∫£n c√≥ giao d·ªãch gi√° tr·ªã cao v·ªõi ti√™u ch√≠ nghi√™m ng·∫∑t h∆°n
            session.run("""
                MATCH (a:Account)
                OPTIONAL MATCH (a)-[tx:SENT]->()
                WITH a, tx.amount as amount, count(tx) as tx_count
                WHERE tx_count > 0
                WITH a, 
                     collect(amount) as amounts,
                     avg(amount) as avg_amount,
                     max(amount) as max_amount,
                     count(amount) as num_transactions
                WHERE 
                    // TƒÉng ng∆∞·ª°ng gi√° tr·ªã giao d·ªãch
                    max_amount > 100000 AND
                    // TƒÉng s·ª± ch√™nh l·ªách so v·ªõi trung b√¨nh
                    max_amount > avg_amount * 4 AND
                    // Y√™u c·∫ßu nhi·ªÅu giao d·ªãch gi√° tr·ªã cao
                    size([x IN amounts WHERE x > 80000]) >= 2 AND
                    // Y√™u c·∫ßu nhi·ªÅu giao d·ªãch ƒë·ªÉ c√≥ m·∫´u r√µ r√†ng
                    num_transactions >= 3
                SET a.high_value_tx = true
            """)
