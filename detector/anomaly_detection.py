from .utils.config import DEFAULT_PERCENTILE, FEATURE_WEIGHTS
from .database_manager import DatabaseManager
from .queries.anomaly_detection_queries import (
    COMPUTE_ANOMALY_SCORE, 
    TRANSFER_SCORE_TO_RELATIONSHIP,
    get_flag_anomalies_query,
    DEFAULT_FLAG,
    EXPORT_ANOMALY_SCORES
)

class AnomalyDetector:
    def __init__(self, db_manager: DatabaseManager, weights=None, percentile_cutoff=None):
        self.db_manager = db_manager
        self.weights = weights or FEATURE_WEIGHTS
        self.percentile_cutoff = percentile_cutoff or DEFAULT_PERCENTILE
    def compute_anomaly_scores(self):
        """T√≠nh ƒëi·ªÉm b·∫•t th∆∞·ªùng (anomaly score) d·ª±a tr√™n weighted sum."""
        print("üîÑ ƒêang t√≠nh to√°n anomaly score...")
        
        # T·∫°o weighted sum c·ªßa t·∫•t c·∫£ c√°c ƒë·∫∑c tr∆∞ng ƒë√£ normalize
        self.db_manager.run_query(COMPUTE_ANOMALY_SCORE)
        
        # Chuy·ªÉn anomaly score t·ª´ Account sang Transaction
        self.db_manager.run_query(TRANSFER_SCORE_TO_RELATIONSHIP)
          # Export anomaly score t·ª´ graph v·ªÅ DataFrame ƒë·ªÉ xu·∫•t ra file csv
        df = self.db_manager.run_query(EXPORT_ANOMALY_SCORES)
        import pandas as pd
        if df is None:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ export.")
            return

        # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ sang DataFrame
        if isinstance(df, dict):
            # Ch·ªâ c√≥ m·ªôt h√†ng d·ªØ li·ªáu
            df = pd.DataFrame([df])
        elif isinstance(df, list):
            # Nhi·ªÅu h√†ng d·ªØ li·ªáu
            df = pd.DataFrame(df)
        
        # Xu·∫•t ra file CSV
        if not df.empty:
            df.to_csv('anomaly_scores.csv', index=False)
            print(f"‚úÖ ƒê√£ xu·∫•t {len(df)} giao d·ªãch c√≥ anomaly score ra file anomaly_scores.csv")
                
        print("‚úÖ ƒê√£ t√≠nh to√°n xong anomaly score.")

    def flag_anomalies(self, percentile_cutoff=None):
        """ƒê√°nh d·∫•u giao d·ªãch b·∫•t th∆∞·ªùng d·ª±a tr√™n ng∆∞·ª°ng ph√¢n v·ªã (percentile)."""
        if percentile_cutoff is not None:
            self.percentile_cutoff = percentile_cutoff
            
        print(f"üîÑ ƒêang ƒë√°nh d·∫•u c√°c giao d·ªãch b·∫•t th∆∞·ªùng (ng∆∞·ª°ng ph√¢n v·ªã: {self.percentile_cutoff*100}%)...")
        
        # T√≠nh gi√° tr·ªã ng∆∞·ª°ng percentile
        result = self.db_manager.run_query(get_flag_anomalies_query(self.percentile_cutoff))
        
        if result:
            threshold = result["threshold"]
            flagged_count = result["flagged_count"]
            
            # ƒê√°nh d·∫•u c√°c giao d·ªãch kh√¥ng v∆∞·ª£t ng∆∞·ª°ng l√† kh√¥ng b·∫•t th∆∞·ªùng
            self.db_manager.run_query(DEFAULT_FLAG)
            
            print(f"‚úÖ ƒê√£ ƒë√°nh d·∫•u {flagged_count} giao d·ªãch b·∫•t th∆∞·ªùng (threshold: {threshold:.6f}).")
        else:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ t√≠nh ng∆∞·ª°ng percentile cho anomaly score.")