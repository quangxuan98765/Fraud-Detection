from neo4j import GraphDatabase
from config import NEO4J_URI, NEO4J_USER, NEO4J_PASSWORD

class DatabaseManager:
    def __init__(self):
        self.driver = GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USER, NEO4J_PASSWORD))

    def check_data(self):
        """Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu trong database ch∆∞a"""
        with self.driver.session() as session:
            result = session.run("MATCH (n) RETURN count(n) as count")
            count = result.single()["count"]
            
            # L·∫•y th√™m th·ªëng k√™
            stats = {}
            try:
                accounts = session.run("MATCH (a:Account) RETURN count(a) as count").single()
                stats["accounts"] = accounts["count"] if accounts else 0
                
                transactions = session.run("MATCH ()-[r:SENT]->() RETURN count(r) as count").single()
                stats["transactions"] = transactions["count"] if transactions else 0
                
                has_analysis = session.run("MATCH (a:Account) WHERE a.fraud_score IS NOT NULL RETURN count(a) as count").single()
                stats["has_analysis"] = has_analysis["count"] > 0 if has_analysis else False
            except:
                stats = {"accounts": 0, "transactions": 0, "has_analysis": False}
                
            return count > 0, stats
        
    def clear_database(self):
        """X√≥a to√†n b·ªô d·ªØ li·ªáu trong database"""
        with self.driver.session() as session:
            try:
                # X√≥a c√°c indexes tr∆∞·ªõc (n·∫øu c√≥)
                try:
                    session.run("DROP INDEX ON :Account(id)")
                except:
                    pass
                    
                # X√≥a t·∫•t c·∫£ nodes v√† relationships
                session.run("MATCH (n) DETACH DELETE n")
                
                # Ki·ªÉm tra l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√£ x√≥a th√†nh c√¥ng
                result = session.run("MATCH (n) RETURN count(n) as count").single()
                is_empty = result["count"] == 0
                
                if is_empty:
                    print("ƒê√£ x√≥a th√†nh c√¥ng to√†n b·ªô d·ªØ li·ªáu t·ª´ database")
                else:
                    print(f"V·∫´n c√≤n {result['count']} nodes trong database")
                    
                return is_empty
            except Exception as e:
                print(f"L·ªói khi x√≥a database: {e}")
                return False

    def cleanup_projected_graph(self):
        """X√≥a projected graph v·ªõi c∆° ch·∫ø timeout v√† b·ªè qua vi·ªác ki·ªÉm tra t·ªìn t·∫°i"""
        with self.driver.session() as session:
            print("üîç ƒêang x√≥a projected graph...")
            try:
                # Th·ª≠ x√≥a tr·ª±c ti·∫øp m√† kh√¥ng ki·ªÉm tra tr∆∞·ªõc
                session.run("""
                    CALL gds.graph.drop('fraud_graph', false)
                    YIELD graphName
                    RETURN 'ƒê√£ x√≥a ' + graphName AS message
                """)
                print("  ƒê√£ x√≥a projected graph th√†nh c√¥ng")
            except Exception as e:
                # N·∫øu l·ªói v√¨ graph kh√¥ng t·ªìn t·∫°i - kh√¥ng sao c·∫£
                if "Graph with name fraud_graph does not exist" in str(e):
                    print("  Projected graph kh√¥ng t·ªìn t·∫°i, kh√¥ng c·∫ßn x√≥a")
                else:
                    print(f"  Kh√¥ng th·ªÉ x√≥a projected graph: {str(e)[:150]}...")
                
                # Ti·∫øp t·ª•c x·ª≠ l√Ω b√¨nh th∆∞·ªùng
                return True

    def close(self):
        """ƒê√≥ng k·∫øt n·ªëi ƒë·∫øn Neo4j"""
        if self.driver:
            self.driver.close()
