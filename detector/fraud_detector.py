import time
from .database_manager import DatabaseManager
from .feature_extraction import FeatureExtractor
from .graph_algorithms import GraphAlgorithms
from .anomaly_detection import AnomalyDetector
from .evaluation import EvaluationManager
from .utils.config import NEO4J_URI, NEO4J_USER, NEO4J_PASSWORD, DEFAULT_PERCENTILE
from .queries.fraud_detector_queries import (
    # Queries for prepare_ground_truth
    CHECK_FRAUD_FIELD_QUERY,
    MAP_FRAUD_TO_GROUND_TRUTH_QUERY,
    CHECK_GROUND_TRUTH_RESULT_QUERY,
    
    # Queries for examine_data
    GROUND_TRUTH_DISTRIBUTION_QUERY,
    TYPE_CHECK_QUERY,
    SCORE_DISTRIBUTION_QUERY,
    
    # Queries for cleanup
    get_node_cleanup_query,
    RELATIONSHIP_CLEANUP_QUERY,
    DELETE_SIMILAR_RELATIONSHIPS_QUERY
)

class FraudDetector:
    def __init__(self, db_manager: DatabaseManager):
        """Kh·ªüi t·∫°o fraud detector v·ªõi c√°c th√†nh ph·∫ßn con."""
        self.db_manager = db_manager
              # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn con
        self.feature_extractor = FeatureExtractor(self.db_manager)
        self.graph_algorithms = GraphAlgorithms(self.db_manager)
        self.anomaly_detector = AnomalyDetector(self.db_manager, percentile_cutoff=DEFAULT_PERCENTILE)
        self.evaluation = EvaluationManager(self.db_manager)
        
        # Config
        self.percentile_cutoff = DEFAULT_PERCENTILE

    def prepare_ground_truth(self):
        """Map isFraud t·ª´ CSV sang ground_truth_fraud ƒë·ªÉ h·ªó tr·ª£ ƒë√°nh gi√°."""
        print("üîÑ ƒêang chu·∫©n b·ªã d·ªØ li·ªáu ground truth...")
        
        # Ki·ªÉm tra xem isFraud c√≥ t·ªìn t·∫°i trong SENT relationships kh√¥ng
        result = self.db_manager.run_query(CHECK_FRAUD_FIELD_QUERY)
        
        if result and result["has_is_fraud"] > 0:
            print(f"  ‚Ä¢ T√¨m th·∫•y {result['has_is_fraud']} giao d·ªãch c√≥ tr∆∞·ªùng isFraud")
            
            # Map t·ª´ isFraud sang ground_truth_fraud
            map_result = self.db_manager.run_query(MAP_FRAUD_TO_GROUND_TRUTH_QUERY)
            
            if map_result:
                print(f"  ‚úÖ ƒê√£ map {map_result['mapped']} giao d·ªãch t·ª´ isFraud sang ground_truth_fraud")
        else:
            print("  ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng isFraud trong d·ªØ li·ªáu SENT relationships")
        
        # Ki·ªÉm tra k·∫øt qu·∫£
        final_result = self.db_manager.run_query(CHECK_GROUND_TRUTH_RESULT_QUERY)
        
        if final_result:
            total = final_result["total"]
            has_ground_truth = final_result["has_ground_truth"]
            fraud_cases = final_result["fraud_cases"]
            
            print(f"\nüìä Th√¥ng tin ground truth sau khi chu·∫©n b·ªã:")
            print(f"  ‚Ä¢ T·ªïng s·ªë giao d·ªãch: {total}")
            print(f"  ‚Ä¢ S·ªë giao d·ªãch c√≥ ground truth: {has_ground_truth} ({has_ground_truth/total*100:.2f}%)")
            print(f"  ‚Ä¢ S·ªë giao d·ªãch gian l·∫≠n: {fraud_cases} ({fraud_cases/has_ground_truth*100:.2f}% trong s·ªë c√≥ nh√£n)")

    def examine_data(self):
        """
        Ki·ªÉm tra v√† x√°c th·ª±c d·ªØ li·ªáu tr∆∞·ªõc khi th·ª±c hi·ªán ph√¢n t√≠ch.
        - Ki·ªÉm tra s·ª± ph√¢n b·ªë c·ªßa ground truth data
        - Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu c·ªßa c√°c ƒë·∫∑c tr∆∞ng
        - Ki·ªÉm tra s·ª± nh·∫•t qu√°n v√† ƒë·∫ßy ƒë·ªß c·ªßa d·ªØ li·ªáu
        """
        print("üîç ƒêang ki·ªÉm tra d·ªØ li·ªáu...")
        
        # 1. Ki·ªÉm tra s·ª± t·ªìn t·∫°i v√† ph√¢n b·ªë c·ªßa ground_truth_fraud
        result = self.db_manager.run_query(GROUND_TRUTH_DISTRIBUTION_QUERY)
        
        if result:
            total = result["total"]
            has_ground_truth = result["has_ground_truth"]
            fraud_cases = result["fraud_cases"]
            coverage_ratio = result["coverage_ratio"]
            fraud_ratio = result["fraud_ratio"]
            
            print(f"\nüìä Ph√¢n t√≠ch ground truth data:")
            print(f"  ‚Ä¢ T·ªïng s·ªë giao d·ªãch: {total}")
            print(f"  ‚Ä¢ S·ªë giao d·ªãch c√≥ ground truth: {has_ground_truth} ({coverage_ratio*100:.2f}%)")
            print(f"  ‚Ä¢ S·ªë giao d·ªãch gian l·∫≠n: {fraud_cases} ({fraud_ratio*100:.2f}%)")
            
            # C·∫£nh b√°o n·∫øu t·ª∑ l·ªá ph·ªß qu√° th·∫•p
            if coverage_ratio < 0.5:
                print(f"  ‚ö†Ô∏è C·∫£nh b√°o: Ch·ªâ {coverage_ratio*100:.2f}% giao d·ªãch c√≥ ground truth data.")
            
            # C·∫£nh b√°o n·∫øu t·ª∑ l·ªá gian l·∫≠n qu√° cao ho·∫∑c qu√° th·∫•p
            if fraud_ratio < 0.001:
                print(f"  ‚ö†Ô∏è C·∫£nh b√°o: T·ª∑ l·ªá gian l·∫≠n qu√° th·∫•p ({fraud_ratio*100:.4f}%).")
            elif fraud_ratio > 0.2:
                print(f"  ‚ö†Ô∏è C·∫£nh b√°o: T·ª∑ l·ªá gian l·∫≠n qu√° cao ({fraud_ratio*100:.2f}%).")
        else:
            print("  ‚ùå Kh√¥ng th·ªÉ truy v·∫•n th√¥ng tin ground truth data.")
        
        # 2. Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu c·ªßa ground_truth_fraud
        try:
            # Run this query directly since it uses APOC
            with self.db_manager.driver.session() as session:
                type_check_result = session.run(TYPE_CHECK_QUERY).data()
                
            if type_check_result:
                print("\nüìä Ki·ªÉu d·ªØ li·ªáu c·ªßa ground_truth_fraud:")
                for record in type_check_result:
                    print(f"  ‚Ä¢ {record['data_type']}: {record['count']} giao d·ªãch")
                    
                    # C·∫£nh b√°o n·∫øu c√≥ ki·ªÉu d·ªØ li·ªáu kh√¥ng ph·∫£i boolean
                    if record['data_type'] != 'Boolean' and record['data_type'] != 'boolean':
                        print(f"  ‚ö†Ô∏è C·∫£nh b√°o: ground_truth_fraud c√≥ ki·ªÉu d·ªØ li·ªáu {record['data_type']} thay v√¨ Boolean.")
        except Exception as e:
            print(f"  ‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu: {str(e)}")
            print("  üîÑ S·∫Ω ti·∫øp t·ª•c v·ªõi gi·∫£ ƒë·ªãnh ground_truth_fraud l√† String ho·∫∑c Boolean.")
        
        # 3. Ki·ªÉm tra ph√¢n ph·ªëi c·ªßa anomaly score (n·∫øu c√≥)
        score_result = self.db_manager.run_query(SCORE_DISTRIBUTION_QUERY)
        
        if score_result and score_result["count"] > 0:
            print("\nüìä Ph√¢n ph·ªëi c·ªßa anomaly score:")
            print(f"  ‚Ä¢ S·ªë giao d·ªãch c√≥ anomaly score: {score_result['count']}")
            print(f"  ‚Ä¢ Gi√° tr·ªã nh·ªè nh·∫•t: {score_result['min_score']:.6f}")
            print(f"  ‚Ä¢ Gi√° tr·ªã l·ªõn nh·∫•t: {score_result['max_score']:.6f}")
            print(f"  ‚Ä¢ Gi√° tr·ªã trung b√¨nh: {score_result['avg_score']:.6f}")
            print(f"  ‚Ä¢ ƒê·ªô l·ªách chu·∫©n: {score_result['std_score']:.6f}")
            print(f"  ‚Ä¢ Gi√° tr·ªã trung v·ªã: {score_result['median_score']:.6f}")
            print(f"  ‚Ä¢ Ph√¢n v·ªã 95%: {score_result['p95_score']:.6f}")
            print(f"  ‚Ä¢ Ph√¢n v·ªã 99%: {score_result['p99_score']:.6f}")
            
            # C·∫£nh b√°o n·∫øu ph√¢n ph·ªëi kh√¥ng ƒë·ªÅu
            if score_result['std_score'] < 0.001:
                print("  ‚ö†Ô∏è C·∫£nh b√°o: Ph√¢n ph·ªëi anomaly score qu√° t·∫≠p trung (ƒë·ªô l·ªách chu·∫©n th·∫•p).")
        
        print("‚úÖ ƒê√£ ho√†n th√†nh ki·ªÉm tra d·ªØ li·ªáu.")
    
    def cleanup_properties_and_relationships(self):
        """X√≥a t·∫•t c·∫£ c√°c thu·ªôc t√≠nh ƒë∆∞·ª£c th√™m v√†o trong qu√° tr√¨nh ph√¢n t√≠ch ƒë·ªÉ tr√°nh ƒë·∫ßy database."""
        print("üîÑ ƒêang d·ªçn d·∫πp c√°c thu·ªôc t√≠nh ph√¢n t√≠ch...")
        
        # Danh s√°ch c√°c thu·ªôc t√≠nh ƒë∆∞·ª£c th√™m v√†o trong qu√° tr√¨nh ph√¢n t√≠ch
        added_properties = [
            'degScore', 'prScore', 'communityId', 'communitySize', 'normCommunitySize',
            'simScore', 'btwScore', 'hubScore', 'authScore', 'coreScore', 'triCount',
            'cycleCount', 'tempBurst', 'tempBurst1h', 'tempBurst24h', 'anomaly_score', 'flagged'
        ]
        
        try:
            # X√≥a thu·ªôc t√≠nh tr√™n t·∫•t c·∫£ c√°c node
            self.db_manager.run_query(get_node_cleanup_query(added_properties))
            
            # X√≥a thu·ªôc t√≠nh tr√™n relationships
            self.db_manager.run_query(RELATIONSHIP_CLEANUP_QUERY)
            print(f"‚úÖ ƒê√£ x√≥a {len(added_properties)} thu·ªôc t√≠nh ph√¢n t√≠ch kh·ªèi database.")
        except Exception as e:
            print(f"‚ùå L·ªói khi d·ªçn d·∫πp thu·ªôc t√≠nh: {str(e)}")
            
        # X√≥a c√°c m·ªëi quan h·ªá SIMILAR (t·ª´ Node Similarity)
        try:
            self.db_manager.run_query(DELETE_SIMILAR_RELATIONSHIPS_QUERY)
            print("‚úÖ ƒê√£ x√≥a c√°c m·ªëi quan h·ªá SIMILAR.")
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a quan h·ªá SIMILAR: {str(e)}")
    
    def run_pipeline(self, percentile_cutoff=None):
        """
        Ch·∫°y to√†n b·ªô pipeline ph√°t hi·ªán b·∫•t th∆∞·ªùng.
        
        Args:
            percentile_cutoff: Ng∆∞·ª°ng ph√¢n v·ªã ƒë·ªÉ ƒë√°nh d·∫•u giao d·ªãch b·∫•t th∆∞·ªùng (m·∫∑c ƒë·ªãnh: 0.95)
        
        Returns:
            dict: Metrics ƒë√°nh gi√° hi·ªáu su·∫•t
        """

        if percentile_cutoff is not None:
            self.percentile_cutoff = percentile_cutoff
            self.anomaly_detector.percentile_cutoff = percentile_cutoff
            
        start_time = time.time()
        
        print("=" * 50)
        print("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y pipeline ph√°t hi·ªán b·∫•t th∆∞·ªùng kh√¥ng gi√°m s√°t")
        print("=" * 50)
        
        # 1. Chu·∫©n b·ªã d·ªØ li·ªáu ground truth
        self.prepare_ground_truth()

        # 2. Ki·ªÉm tra v√† s·ª≠a l·ªói d·ªØ li·ªáu
        self.examine_data()
        
        # 3. T·∫°o graph projections
        self.db_manager.create_graph_projections()

        # 4. Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng th·ªùi gian
        self.feature_extractor.extract_temporal_features()
        
        # 5. Ch·∫°y c√°c thu·∫≠t to√°n Graph Data Science
        self.graph_algorithms = GraphAlgorithms(
            self.db_manager, 
            self.db_manager.main_graph_name,  # Truy·ªÅn t√™n graph t·ª´ database_manager sang
            self.db_manager.similarity_graph_name,
            self.db_manager.temporal_graph_name
        )
        self.graph_algorithms.run_algorithms()
        
        # 6. Normalize c√°c ƒë·∫∑c tr∆∞ng
        self.feature_extractor.normalize_features()
        
        # 7. T√≠nh to√°n anomaly score
        self.anomaly_detector.compute_anomaly_scores()
        
        # 8. ƒê√°nh d·∫•u c√°c giao d·ªãch b·∫•t th∆∞·ªùng
        self.anomaly_detector.flag_anomalies(self.percentile_cutoff)
        
        # 9. ƒê√°nh gi√° hi·ªáu su·∫•t
        metrics = self.evaluation.evaluate_performance()
        
        # 10. Ph√¢n t√≠ch t·∫ßm quan tr·ªçng c·ªßa c√°c ƒë·∫∑c tr∆∞ng
        feature_importances = self.evaluation.analyze_feature_importance(self.feature_extractor.weights)

        # 11. X√≥a c√°c graph projections
        self.db_manager.delete_graph_projections()

        # 12. D·ªçn d·∫πp c√°c thu·ªôc t√≠nh v√† m·ªëi quan h·ªá kh√¥ng c·∫ßn thi·∫øt
        cleanup_result = self.db_manager.cleanup_properties()

        end_time = time.time()
        execution_time = end_time - start_time
        
        print("\n‚è±Ô∏è Th·ªùi gian th·ª±c thi: {:.2f} gi√¢y".format(execution_time))
        print("=" * 50)
        print("‚úÖ Ho√†n th√†nh pipeline ph√°t hi·ªán b·∫•t th∆∞·ªùng kh√¥ng gi√°m s√°t")
        print("=" * 50)
        
        return metrics  
      
    def get_suspicious_accounts(self, threshold=None, min_flagged_tx=1):
        """
        L·∫•y c√°c t√†i kho·∫£n ƒë√°ng ng·ªù d·ª±a tr√™n ƒëi·ªÉm b·∫•t th∆∞·ªùng v√† s·ªë giao d·ªãch b·ªã ƒë√°nh d·∫•u.
        
        Args:
            threshold (float, optional): Ng∆∞·ª°ng anomaly_score ƒë·ªÉ l·ªçc t√†i kho·∫£n. 
                                        N·∫øu None, s·∫Ω d√πng r.flagged = true.
            min_flagged_tx (int): S·ªë l∆∞·ª£ng giao d·ªãch b·ªã ƒë√°nh d·∫•u t·ªëi thi·ªÉu.
            
        Returns:
            list: Danh s√°ch c√°c t√†i kho·∫£n ƒë√°ng ng·ªù d∆∞·ªõi d·∫°ng dict.
        """
        print(f"üîç ƒêang t√¨m c√°c t√†i kho·∫£n ƒë√°ng ng·ªù...")
        
        # Clear query logic - separate branches for threshold and flagged criteria        
        if threshold is None:
            # Use flagged relationships to identify suspicious accounts
            query = """
            MATCH (a:Account)-[r:SENT]->()
            WHERE r.flagged = true
            WITH a, COUNT(r) AS flagged_tx_count
            WHERE flagged_tx_count >= $min_flagged_tx
            OPTIONAL MATCH (a)-[r2:SENT]->()
            WHERE r2.combined_score IS NOT NULL
            WITH a, flagged_tx_count, AVG(r2.combined_score) AS avg_combined_score 
            RETURN a.id AS account, a.name, flagged_tx_count, 
                a.anomaly_score AS score, avg_combined_score AS combined_score
            ORDER BY avg_combined_score DESC, flagged_tx_count DESC
            LIMIT 50
            """
            params = {"min_flagged_tx": min_flagged_tx}
        else:
            # Use anomaly_score threshold to identify suspicious accounts
            query = """
            MATCH (a:Account)
            WHERE a.anomaly_score >= $threshold
            OPTIONAL MATCH (a)-[r:SENT]->() WHERE r.flagged = true
            WITH a, COUNT(r) AS flagged_tx_count
            RETURN a.id AS account, a.name, flagged_tx_count, 
                a.anomaly_score AS score
            ORDER BY a.anomaly_score DESC, flagged_tx_count DESC
            LIMIT 50
            """
            params = {"threshold": threshold}
        
        # Verify the query with a debug log
        print(f"Executing query with params: {params}")
        
        # Ensure correct result handling
        results = self.db_manager.run_query(query, params)
        
        # Convert to list if it's a single result
        if isinstance(results, dict):
            suspicious_accounts = [results]
        elif isinstance(results, list):
            suspicious_accounts = results
        else:
            suspicious_accounts = []
        
        # If no accounts found, try a direct approach
        if not suspicious_accounts:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ƒë√°ng ng·ªù, ki·ªÉm tra xem c√≥ giao d·ªãch ƒë∆∞·ª£c ƒë√°nh d·∫•u kh√¥ng...")
            
            # Check if there are any flagged transactions
            check_query = """
            MATCH ()-[r:SENT]->()
            WHERE r.flagged = true
            RETURN COUNT(r) AS flagged_count
            """
            check_result = self.db_manager.run_query(check_query)
            
            if check_result and check_result.get("flagged_count", 0) > 0:
                print(f"‚úÖ C√≥ {check_result['flagged_count']} giao d·ªãch ƒë∆∞·ª£c ƒë√°nh d·∫•u, nh∆∞ng kh√¥ng t√†i kho·∫£n n√†o th·ªèa ƒëi·ªÅu ki·ªán.")
            else:
                print("‚ùå Kh√¥ng c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c ƒë√°nh d·∫•u. Ki·ªÉm tra l·∫°i h√†m flag_anomalies().")
            
            # Try getting accounts with highest anomaly scores
            alt_query = """
            MATCH (a:Account)
            WHERE a.anomaly_score IS NOT NULL
            RETURN a.id AS account, a.name, 0 AS flagged_tx_count, 
                a.anomaly_score AS score
            ORDER BY a.anomaly_score DESC
            LIMIT 10
            """
            
            alt_results = self.db_manager.run_query(alt_query)
            
            # Handle results appropriately
            if isinstance(alt_results, dict):
                suspicious_accounts = [alt_results]
            elif isinstance(alt_results, list):
                suspicious_accounts = alt_results
            else:
                suspicious_accounts = []
        
        # Display results
        if suspicious_accounts:
            print(f"‚úÖ T√¨m th·∫•y {len(suspicious_accounts)} t√†i kho·∫£n ƒë√°ng ng·ªù.")
            print("\nüìä Top t√†i kho·∫£n ƒë√°ng ng·ªù:")
            print(f"{'ID T√†i kho·∫£n':<20} {'T√™n (n·∫øu c√≥)':<20} {'Giao d·ªãch ƒë√°nh d·∫•u':<20} {'ƒêi·ªÉm b·∫•t th∆∞·ªùng':<15}")
            print("-" * 75)
            
            for acc in suspicious_accounts[:10]:  # Hi·ªÉn th·ªã top 10
                name = acc.get('name', 'N/A')
                print(f"{acc['account']:<20} {name:<20} {acc['flagged_tx_count']:<20} {acc.get('score', 0):.6f}")
        else:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ƒë√°ng ng·ªù th·ªèa m√£n ƒëi·ªÅu ki·ªán.")
        
        return suspicious_accounts
