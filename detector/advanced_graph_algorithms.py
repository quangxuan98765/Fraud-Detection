"""
Ch·ª©a c√°c thu·∫≠t to√°n ƒë·ªì th·ªã n√¢ng cao ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c ph√°t hi·ªán gian l·∫≠n
"""
from .database_manager import DatabaseManager
import time

class AdvancedGraphAlgorithms:
    def __init__(self, db_manager: DatabaseManager, main_graph_name=None):
        self.db_manager = db_manager
        self.main_graph_name = main_graph_name
        # Th√™m t√™n c√°c graph m·ªõi
        self.embedding_graph_name = "embedding-graph"
        self.pattern_graph_name = "pattern-graph"
        self.temporal_pattern_graph_name = "temporal-pattern-graph"

    def run_advanced_algorithms(self):
        """Ch·∫°y c√°c thu·∫≠t to√°n ƒë·ªì th·ªã n√¢ng cao ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c."""
        print("üîÑ ƒêang ch·∫°y c√°c thu·∫≠t to√°n ph√¢n t√≠ch ƒë·ªì th·ªã n√¢ng cao...")
        
        # Ki·ªÉm tra v√† t·∫°o graph projection n·∫øu c·∫ßn
        self._ensure_graph_projections()
        
        # 1. Node Embedding v·ªõi FastRP
        self._run_node_embedding()
        
        # 2. Ph√°t hi·ªán c·∫•u tr√∫c m·∫´u ƒë·∫∑c tr∆∞ng c·ªßa gian l·∫≠n
        self._detect_fraud_patterns()
        
        # 3. M·∫°ng ƒë·ªì th·ªã th·ªùi gian (Temporal Graph Network)
        self._analyze_temporal_patterns()
        
        # 4. Ph√°t hi·ªán c√°c c·∫•u tr√∫c v√≤ng l·∫∑p ƒë√°ng ng·ªù ph·ª©c t·∫°p h∆°n
        self._detect_complex_cycles()
        
        # 5. Ph√¢n t√≠ch d√≤ng ti·ªÅn ƒë√°ng ng·ªù
        self._analyze_money_flow()
        
        # 6. Ph√°t hi·ªán c√°c c·ª•m giao d·ªãch ƒë√°ng ng·ªù
        self._detect_suspicious_communities()
        
        # D·ªçn d·∫πp c√°c graph projections
        self._cleanup_graph_projections()
        
        print("‚úÖ ƒê√£ ch·∫°y xong c√°c thu·∫≠t to√°n ƒë·ªì th·ªã n√¢ng cao.")
    
    def _ensure_graph_projections(self):
        """Ki·ªÉm tra v√† t·∫°o c√°c graph projections c·∫ßn thi·∫øt."""
        print("  - Ki·ªÉm tra v√† t·∫°o graph projections...")
        
        # Ki·ªÉm tra xem graph ch√≠nh ƒë√£ t·ªìn t·∫°i hay ch∆∞a
        check_query = """
        CALL gds.graph.exists($graphName)
        YIELD exists
        RETURN exists
        """
        
        result = self.db_manager.run_query(check_query, {"graphName": self.main_graph_name})
        
        if not result or not result.get("exists", False):
            print(f"  - Graph '{self.main_graph_name}' kh√¥ng t·ªìn t·∫°i, ƒëang t·∫°o m·ªõi...")
            
            # T·∫°o graph projection ch√≠nh cho ph√¢n t√≠ch
            create_main_query = """
            CALL gds.graph.project(
                $graphName,
                'Account',
                {
                    SENT: {
                        type: 'SENT',
                        orientation: 'NATURAL',
                        properties: {
                            weight: {
                                property: 'amount',
                                defaultValue: 0.0,
                                aggregation: 'NONE'
                            }
                        }
                    }
                }
            )
            """
            
            try:
                self.db_manager.run_query(create_main_query, {"graphName": self.main_graph_name})
                print(f"  ‚úÖ ƒê√£ t·∫°o graph projection '{self.main_graph_name}'")
            except Exception as e:
                print(f"  ‚ùå L·ªói khi t·∫°o graph projection: {str(e)}")
                # N·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c graph ch√≠nh, ƒë·∫∑t t√™n graph m·ªõi
                self.main_graph_name = f"transactions-graph-{int(time.time())}"
                print(f"  üîÑ Th·ª≠ t·∫°o v·ªõi t√™n m·ªõi: {self.main_graph_name}")
                self.db_manager.run_query(create_main_query, {"graphName": self.main_graph_name})
                
        else:
            print(f"  ‚úÖ Graph projection '{self.main_graph_name}' ƒë√£ t·ªìn t·∫°i")
            
        # T·∫°o graph cho embedding n·∫øu c·∫ßn
        self._create_graph_for_embedding()
        
    def _create_graph_for_embedding(self):
        """T·∫°o graph projection c·ª• th·ªÉ cho FastRP embedding."""
        check_query = """
        CALL gds.graph.exists($graphName) 
        YIELD exists
        RETURN exists
        """
        
        result = self.db_manager.run_query(check_query, {"graphName": self.embedding_graph_name})
        
        if not result or not result.get("exists", False):
            print(f"  - ƒêang t·∫°o graph projection '{self.embedding_graph_name}' cho embedding...")
            
            create_query = """
            CALL gds.graph.project(
                $graphName,
                'Account',
                {
                    SENT: {
                        type: 'SENT',
                        orientation: 'NATURAL',
                        properties: {
                            weight: {
                                property: 'amount',
                                defaultValue: 0.0,
                                aggregation: 'SUM'
                            }
                        }
                    }
                },
                {
                    nodeProperties: [
                        'degScore', 'hubScore', 'btwScore', 'maxAmountRatio'
                    ]
                }
            )
            """
            
            try:
                self.db_manager.run_query(create_query, {"graphName": self.embedding_graph_name})
                print(f"  ‚úÖ ƒê√£ t·∫°o graph '{self.embedding_graph_name}' cho embedding")
            except Exception as e:
                print(f"  ‚ö†Ô∏è L·ªói khi t·∫°o graph cho embedding: {str(e)}")
                print("  ‚ö†Ô∏è S·∫Ω ti·∫øp t·ª•c v·ªõi graph ch√≠nh")
                self.embedding_graph_name = self.main_graph_name
    
    def _cleanup_graph_projections(self):
        """D·ªçn d·∫πp c√°c graph projections ƒë√£ t·∫°o."""
        print("  - ƒêang d·ªçn d·∫πp c√°c graph projections...")
        
        # Danh s√°ch c√°c graph c·∫ßn d·ªçn d·∫πp
        graph_names = [
            self.embedding_graph_name,
            self.pattern_graph_name,
            self.temporal_pattern_graph_name
        ]
        
        for graph_name in graph_names:
            if graph_name and graph_name != self.main_graph_name:  # Kh√¥ng x√≥a graph ch√≠nh
                try:
                    drop_query = "CALL gds.graph.drop($graphName, false)"
                    self.db_manager.run_query(drop_query, {"graphName": graph_name})
                    print(f"  ‚úÖ ƒê√£ x√≥a graph '{graph_name}'")
                except Exception as e:
                    print(f"  ‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a graph '{graph_name}': {str(e)}")
        
        # Kh√¥ng x√≥a graph ch√≠nh v√¨ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ti·∫øp
        print(f"  ‚ÑπÔ∏è Gi·ªØ l·∫°i graph ch√≠nh '{self.main_graph_name}' ƒë·ªÉ s·ª≠ d·ª•ng ti·∫øp")
    
    def _run_node_embedding(self):
        """Ch·∫°y thu·∫≠t to√°n nh√∫ng node (node embedding) FastRP."""
        print("  - ƒêang ch·∫°y Node Embedding v·ªõi FastRP...")
        
        # T·∫°o embedding cho c√°c node
        query = f"""
        CALL gds.fastRP.write(
            '{self.embedding_graph_name}',
            {{
                writeProperty: 'embedding',
                embeddingDimension: 128,
                iterationWeights: [0.8, 1.0, 1.0, 1.0],
                relationshipWeightProperty: 'weight',
                featureProperties: ['degScore', 'hubScore', 'btwScore', 'maxAmountRatio']
            }}
        )
        """
        self.db_manager.run_query(query)
          # S·ª≠ d·ª•ng embedding ƒë·ªÉ t√≠nh to√°n fraud score
        embedding_score_query = """
        MATCH (a:Account)
        WHERE a.embedding IS NOT NULL AND size(a.embedding) > 0
        WITH a, a.embedding AS emb,
             // TƒÉng c∆∞·ªùng feature n√†y cho t√†i kho·∫£n c√≥ degree cao
             a.degScore * 1.5 AS weightedDegree,
             a.hubScore * 1.2 AS weightedHub
             
        // Chuy·ªÉn ƒë·ªïi embedding vector th√†nh single score
        WITH a, 
            REDUCE(score = 0.0, i in range(0, size(emb)-1) | 
                score + CASE 
                    // TƒÉng ·∫£nh h∆∞·ªüng c·ªßa c√°c chi·ªÅu embedding quan tr·ªçng
                    WHEN i < 16 THEN emb[i] * 1.5  
                    WHEN i < 32 THEN emb[i] * 1.2
                    ELSE emb[i]
                END
            ) / size(emb) AS embScore,
            weightedDegree,
            weightedHub
            
        // K·∫øt h·ª£p embedding score v·ªõi c√°c ƒë·∫∑c tr∆∞ng quan tr·ªçng kh√°c
        SET a.embeddingScore = embScore,
            a.combinedScore = (embScore * 0.6) + (weightedDegree * 0.3) + (weightedHub * 0.1)
        """
        self.db_manager.run_query(embedding_score_query)
        
        # Chu·∫©n h√≥a combinedScore
        normalize_query = """
        MATCH (a:Account)
        WHERE a.combinedScore IS NOT NULL
        WITH MIN(a.combinedScore) AS min_val, MAX(a.combinedScore) AS max_val
        MATCH (a:Account)
        WHERE a.combinedScore IS NOT NULL
        SET a.combinedScore = (a.combinedScore - min_val) / (max_val - min_val)
        """
        self.db_manager.run_query(normalize_query)
    
    def _detect_fraud_patterns(self):
        """Ph√°t hi·ªán m·∫´u gian l·∫≠n d·ª±a tr√™n c·∫•u tr√∫c ƒë·ªì th·ªã."""
        print("  - ƒêang ph√°t hi·ªán m·∫´u gian l·∫≠n ƒë·∫∑c tr∆∞ng...")
        
        # M·∫´u 1: Ph√°t hi·ªán m√¥ h√¨nh "Fan-out/Fan-in" (ph√¢n t√°n/t·∫≠p trung)
        fan_pattern_query = """
        // Fan-out pattern (1 t√†i kho·∫£n g·ª≠i ti·ªÅn cho nhi·ªÅu t√†i kho·∫£n kh√°c)
        MATCH (a:Account)-[sent:SENT]->(receiver:Account)
        WITH a, count(receiver) AS fanOutCount, sum(sent.amount) AS totalSent
        WHERE fanOutCount > 5
        
        // Ph√°t hi·ªán giao d·ªãch ti·∫øp theo (ph√¢n t√°n r·ªìi t·∫≠p trung l·∫°i)
        OPTIONAL MATCH (receiver:Account)<-[s1:SENT]-(a)-[s2:SENT]->(intermediate:Account)-[s3:SENT]->(collector:Account)
        WHERE s1.step = s2.step AND s2.step < s3.step AND s3.step - s2.step <= 5
        WITH a, fanOutCount, totalSent, COUNT(DISTINCT collector) AS collectCount
        
        // T√≠nh ƒëi·ªÉm fan pattern
        SET a.fanPatternScore = CASE 
            WHEN collectCount > 0 THEN 0.8  // Ph√°t hi·ªán m·∫´u fan-out/fan-in
            WHEN fanOutCount > 15 THEN 0.6  // Nhi·ªÅu giao d·ªãch ƒëi
            WHEN fanOutCount > 10 THEN 0.4  // Kh√° nhi·ªÅu giao d·ªãch ƒëi
            ELSE (fanOutCount / 10) * 0.3   // T·ª∑ l·ªá th·∫•p h∆°n
        END
        """
        self.db_manager.run_query(fan_pattern_query)
        
        # M·∫´u 2: Ph√°t hi·ªán m√¥ h√¨nh "Money mule" (chuy·ªÉn ti·ªÅn qua nhi·ªÅu trung gian)
        mule_pattern_query = """
        // T√¨m ƒë∆∞·ªùng ƒëi t·ª´ source ƒë·∫øn final destination ch·ªâ trong v√†i b∆∞·ªõc
        MATCH path = (src:Account)-[:SENT]->()-[:RECEIVED]->(a1:Account)-[:SENT]->()-[:RECEIVED]->(a2:Account)
        WHERE id(src) <> id(a2)  // kh√¥ng ph·∫£i chu tr√¨nh
        WITH src, a1, a2, path
        
        // Ki·ªÉm tra t√≠nh ch·∫•t ƒë√°ng ng·ªù: th·ªùi gian r·∫•t ng·∫Øn gi·ªØa l√∫c nh·∫≠n v√† g·ª≠i ti·∫øp
        MATCH (a1)-[tx1:SENT]->()-[:RECEIVED]->(a2)
        MATCH (src)-[tx0:SENT]->()-[:RECEIVED]->(a1)
        WHERE abs(tx1.step - tx0.step) <= 3  // Chuy·ªÉn ti·ªÅn nhanh ch√≥ng
        
        // T√≠nh ƒëi·ªÉm mule pattern
        WITH src, a1, a2, tx0.amount AS initialAmount, tx1.amount AS relayedAmount
        WITH src, a1, a2, 
            abs(initialAmount - relayedAmount) / 
                CASE WHEN initialAmount = 0 THEN 1 ELSE initialAmount END AS amountRatio
        
        // ƒê√°nh d·∫•u c√°c t√†i kho·∫£n trung gian
        SET a1.mulePatternScore = CASE
            WHEN amountRatio < 0.1 THEN 0.9  // S·ªë ti·ªÅn g·∫ßn nh∆∞ kh√¥ng ƒë·ªïi
            WHEN amountRatio < 0.2 THEN 0.7  // S·ªë ti·ªÅn thay ƒë·ªïi √≠t
            ELSE 0.5                        // S·ªë ti·ªÅn thay ƒë·ªïi nhi·ªÅu
        END
        """
        self.db_manager.run_query(mule_pattern_query)
        
        # M·∫´u 3: Ph√°t hi·ªán m√¥ h√¨nh "Structuring" (chia nh·ªè giao d·ªãch tr√°nh ng∆∞·ª°ng)
        structuring_query = """
        // T√¨m c√°c c·∫∑p t√†i kho·∫£n c√≥ nhi·ªÅu giao d·ªãch nh·ªè trong th·ªùi gian ng·∫Øn
        MATCH (src:Account)-[sent:SENT]->(receiver:Account)
        WITH src, receiver, count(sent) AS txCount, 
            collect(sent.amount) AS amounts,
            collect(sent.step) AS steps
        WHERE txCount >= 3
        
        // T√≠nh to√°n min v√† max c·ªßa steps ri√™ng bi·ªát
        WITH src, receiver, txCount, amounts, steps,
            reduce(min = 999999, s IN steps | CASE WHEN s < min THEN s ELSE min END) AS minStep,
            reduce(max = 0, s IN steps | CASE WHEN s > max THEN s ELSE max END) AS maxStep
            
        // Ki·ªÉm tra kho·∫£ng th·ªùi gian gi·ªØa c√°c giao d·ªãch c√≥ ng·∫Øn kh√¥ng
        WITH src, receiver, txCount, amounts, (maxStep - minStep) AS timeSpan
        WHERE timeSpan <= 10
        
        // T√≠nh t·ªïng ti·ªÅn v√† gi√° tr·ªã trung b√¨nh
        WITH src, receiver, txCount, timeSpan,
            reduce(s = 0, a IN amounts | s + a) AS totalAmount,
            reduce(s = 0, a IN amounts | s + a) / size(amounts) AS avgAmount
        
        // ƒê√°nh gi√° d·∫•u hi·ªáu structuring
        SET src.structuringScore = CASE
            WHEN txCount >= 5 AND timeSpan <= 3 THEN 0.95  // Nhi·ªÅu giao d·ªãch trong th·ªùi gian r·∫•t ng·∫Øn
            WHEN txCount >= 4 AND timeSpan <= 5 THEN 0.85  // Nhi·ªÅu giao d·ªãch trong th·ªùi gian ng·∫Øn
            WHEN txCount >= 3 AND timeSpan <= 8 THEN 0.7   // Nhi·ªÅu giao d·ªãch trong th·ªùi gian kh√° ng·∫Øn
            ELSE 0.5                                      // √çt d·∫•u hi·ªáu h∆°n
        END
        """
        self.db_manager.run_query(structuring_query)
        
        # K·∫øt h·ª£p c√°c m·∫´u ph√°t hi·ªán ƒë∆∞·ª£c
        combine_patterns_query = """
        MATCH (a:Account)
        SET a.patternScore = 
            COALESCE(a.fanPatternScore, 0) * 0.35 +
            COALESCE(a.mulePatternScore, 0) * 0.4 +
            COALESCE(a.structuringScore, 0) * 0.25
        """
        self.db_manager.run_query(combine_patterns_query)
    
    def _analyze_temporal_patterns(self):
        """Ph√¢n t√≠ch c√°c m·∫´u th·ªùi gian b·∫•t th∆∞·ªùng."""
        print("  - ƒêang ph√¢n t√≠ch m·∫´u th·ªùi gian ƒë√°ng ng·ªù...")
        
        # Ph√°t hi·ªán thay ƒë·ªïi h√†nh vi ƒë·ªôt ng·ªôt
        behavior_change_query = """
        // T√¨m c√°c t√†i kho·∫£n c√≥ l·ªãch s·ª≠ giao d·ªãch
        MATCH (a:Account)-[tx:SENT]->()
        WITH a, tx
        ORDER BY tx.timestamp  // S·∫Øp x·∫øp c√°c giao d·ªãch theo th·ªùi gian
        WITH a, collect(tx) AS transactions
        WHERE size(transactions) >= 6
        
        // T√≠nh to√°n ph√¢n chia giao d·ªãch th√†nh hai n·ª≠a
        WITH a, transactions, 
            size(transactions) / 2 AS midPoint
        
        // T√≠nh to√°n s·ªë ti·ªÅn trung b√¨nh cho m·ªói n·ª≠a
        WITH a, transactions, midPoint,
            [tx IN transactions[0..toInteger(midPoint)] | tx.amount] AS firstHalfAmounts,
            [tx IN transactions[toInteger(midPoint)..] | tx.amount] AS secondHalfAmounts
        
        // T√≠nh to√°n gi√° tr·ªã trung b√¨nh c·ªßa m·ªói n·ª≠a
        WITH a, 
            reduce(total = 0.0, amount IN firstHalfAmounts | total + amount) / 
                size(firstHalfAmounts) AS firstHalfAvg,
            reduce(total = 0.0, amount IN secondHalfAmounts | total + amount) / 
                size(secondHalfAmounts) AS secondHalfAvg
        
        // Ph√°t hi·ªán thay ƒë·ªïi m·∫°nh
        WITH a, firstHalfAvg, secondHalfAvg,
            abs(secondHalfAvg - firstHalfAvg) / 
                CASE WHEN firstHalfAvg = 0 THEN 1 ELSE firstHalfAvg END AS changeFactor
        
        // ƒê√°nh gi√° m·ª©c ƒë·ªô thay ƒë·ªïi
        SET a.behaviorChangeScore = CASE
            WHEN changeFactor > 5.0 THEN 0.9  // Thay ƒë·ªïi r·∫•t l·ªõn
            WHEN changeFactor > 3.0 THEN 0.7  // Thay ƒë·ªïi l·ªõn
            WHEN changeFactor > 2.0 THEN 0.5  // Thay ƒë·ªïi ƒë√°ng k·ªÉ
            WHEN changeFactor > 1.0 THEN 0.3  // Thay ƒë·ªïi nh·ªè
            ELSE 0.1                         // Kh√¥ng thay ƒë·ªïi nhi·ªÅu
        END
        """
        self.db_manager.run_query(behavior_change_query)

        # K·∫øt h·ª£p c√°c ph√¢n t√≠ch th·ªùi gian
        combine_temporal_query = """
        MATCH (a:Account)
        SET a.temporalScore = (
            COALESCE(a.abnormalHourScore, 0) * 0.5 +
            COALESCE(a.behaviorChangeScore, 0) * 0.3 +
            COALESCE(a.tempBurst, 0) * 0.2
        )
        """
        self.db_manager.run_query(combine_temporal_query)
    
    def _detect_complex_cycles(self):
        """Ph√°t hi·ªán c√°c chu tr√¨nh ph·ª©c t·∫°p ƒë√°ng ng·ªù."""
        print("  - ƒêang ph√°t hi·ªán c√°c chu tr√¨nh gian l·∫≠n ph·ª©c t·∫°p...")
        
        # Ph√°t hi·ªán chu tr√¨nh ƒë·ªô d√†i 2 (a->b->a)
        cycle2_query = """
        MATCH path = (a:Account)-[tx1:SENT]->(b:Account)-[tx2:SENT]->(a)
        WHERE id(a) <> id(b)  // Tr√°nh t·ª± v√≤ng
        
        WITH a, b, tx1.amount AS amount1, tx2.amount AS amount2,
            tx1.step AS step1, tx2.step AS step2
        WHERE step1 IS NOT NULL AND step2 IS NOT NULL
        
        // ƒê√°nh gi√° ch√™nh l·ªách s·ªë ti·ªÅn v√† th·ªùi gian
        WITH a, b, 
            CASE WHEN amount1 > amount2 THEN amount1 - amount2 ELSE amount2 - amount1 END AS amountDiff,
            CASE WHEN step1 > step2 THEN step1 - step2 ELSE step2 - step1 END AS timeSpan,
            CASE WHEN amount1 > amount2 THEN amount1 ELSE amount2 END AS maxAmount
        WHERE timeSpan <= 20 AND (amountDiff / maxAmount) < 0.3
        
        // T√≠nh ƒëi·ªÉm chu tr√¨nh
        WITH a, b, timeSpan, amountDiff / maxAmount AS amountRatio
        
        // C·∫≠p nh·∫≠t ƒëi·ªÉm cho c√°c node trong chu tr√¨nh
        SET a.cycleScore = CASE
            WHEN timeSpan <= 5 AND amountRatio < 0.1 THEN 0.95
            WHEN timeSpan <= 10 AND amountRatio < 0.2 THEN 0.85
            WHEN timeSpan <= 20 AND amountRatio < 0.3 THEN 0.7
            ELSE 0.5
        END,
        b.cycleScore = CASE
            WHEN timeSpan <= 5 AND amountRatio < 0.1 THEN 0.9
            WHEN timeSpan <= 10 AND amountRatio < 0.2 THEN 0.8
            WHEN timeSpan <= 20 AND amountRatio < 0.3 THEN 0.65
            ELSE 0.45
        END
        
        RETURN count(*) as cycleCount
        """
        
        # Ph√°t hi·ªán chu tr√¨nh ƒë·ªô d√†i 3 (a->b->c->a)
        cycle3_query = """
        MATCH path = (a:Account)-[tx1:SENT]->(b:Account)-[tx2:SENT]->(c:Account)-[tx3:SENT]->(a)
        WHERE id(a) <> id(b) AND id(b) <> id(c) AND id(a) <> id(c)
        
        WITH a, b, c, tx1.amount AS amount1, tx2.amount AS amount2, tx3.amount AS amount3,
            tx1.step AS step1, tx2.step AS step2, tx3.step AS step3
        WHERE step1 IS NOT NULL AND step2 IS NOT NULL AND step3 IS NOT NULL
        
        // ƒê√°nh gi√° ch√™nh l·ªách s·ªë ti·ªÅn v√† th·ªùi gian
        WITH a, b, c, 
            amount1, amount2, amount3,
            step1, step2, step3,
            CASE 
                WHEN amount1 >= amount2 AND amount1 >= amount3 THEN amount1
                WHEN amount2 >= amount1 AND amount2 >= amount3 THEN amount2
                ELSE amount3
            END AS maxAmount,
            CASE 
                WHEN amount1 <= amount2 AND amount1 <= amount3 THEN amount1
                WHEN amount2 <= amount1 AND amount2 <= amount3 THEN amount2
                ELSE amount3
            END AS minAmount,
            CASE 
                WHEN step1 >= step2 AND step1 >= step3 THEN step1
                WHEN step2 >= step1 AND step2 >= step3 THEN step2
                ELSE step3
            END AS maxStep,
            CASE 
                WHEN step1 <= step2 AND step1 <= step3 THEN step1
                WHEN step2 <= step1 AND step2 <= step3 THEN step2
                ELSE step3
            END AS minStep
        
        WITH a, b, c, 
            (maxAmount - minAmount) AS amountDiff,
            (maxStep - minStep) AS timeSpan,
            maxAmount
        WHERE timeSpan <= 20 AND (amountDiff / maxAmount) < 0.3
        
        // T√≠nh ƒëi·ªÉm chu tr√¨nh
        WITH a, b, c, timeSpan, amountDiff / maxAmount AS amountRatio
        
        // C·∫≠p nh·∫≠t ƒëi·ªÉm cho c√°c node trong chu tr√¨nh
        SET a.cycleScore = CASE
            WHEN timeSpan <= 5 AND amountRatio < 0.1 THEN 0.95
            WHEN timeSpan <= 10 AND amountRatio < 0.2 THEN 0.85
            WHEN timeSpan <= 20 AND amountRatio < 0.3 THEN 0.7
            ELSE 0.5
        END,
        b.cycleScore = CASE
            WHEN timeSpan <= 5 AND amountRatio < 0.1 THEN 0.9
            WHEN timeSpan <= 10 AND amountRatio < 0.2 THEN 0.8
            WHEN timeSpan <= 20 AND amountRatio < 0.3 THEN 0.65
            ELSE 0.45
        END,
        c.cycleScore = CASE
            WHEN timeSpan <= 5 AND amountRatio < 0.1 THEN 0.9
            WHEN timeSpan <= 10 AND amountRatio < 0.2 THEN 0.8
            WHEN timeSpan <= 20 AND amountRatio < 0.3 THEN 0.65
            ELSE 0.45
        END
        
        RETURN count(*) as cycleCount
        """
        
        # Run both queries separately instead of using UNION
        cycle2_result = self.db_manager.run_query(cycle2_query)
        cycle3_result = self.db_manager.run_query(cycle3_query)
        
        # Print results for information
        cycle2_count = cycle2_result.get("cycleCount", 0) if cycle2_result else 0
        cycle3_count = cycle3_result.get("cycleCount", 0) if cycle3_result else 0
        print(f"    ‚Ä¢ Ph√°t hi·ªán {cycle2_count} chu tr√¨nh ƒë·ªô d√†i 2 v√† {cycle3_count} chu tr√¨nh ƒë·ªô d√†i 3")
        
        # Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh cho t√†i kho·∫£n kh√¥ng tham gia chu tr√¨nh
        default_cycle_query = """
        MATCH (a:Account)
        WHERE a.cycleScore IS NULL
        SET a.cycleScore = 0
        RETURN count(*) as defaultedNodes
        """
        default_result = self.db_manager.run_query(default_cycle_query)
        default_count = default_result.get("defaultedNodes", 0) if default_result else 0
        print(f"    ‚Ä¢ ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh cho {default_count} t√†i kho·∫£n kh√¥ng tham gia chu tr√¨nh")
    
    def _analyze_money_flow(self):
        """Ph√¢n t√≠ch d√≤ng ti·ªÅn ƒë√°ng ng·ªù d·ª±a tr√™n m·∫´u giao d·ªãch."""
        print("  - ƒêang ph√¢n t√≠ch d√≤ng ti·ªÅn ƒë√°ng ng·ªù...")
        
        # Ph√°t hi·ªán d√≤ng ti·ªÅn ƒë√°ng ng·ªù
        money_flow_query = """
        // Ph√¢n t√≠ch c√¢n b·∫±ng ti·ªÅn v√†o/ra
        MATCH (a:Account)
        OPTIONAL MATCH (a)-[out:SENT]->()
        WITH a, sum(out.amount) AS totalOut
        
        OPTIONAL MATCH (a)<-[:RECEIVED]-()-[:SENT]-(in:Account)
        WITH a, totalOut, sum(in.amount) AS totalIn
        
        // T√≠nh t·ª∑ l·ªá ti·ªÅn v√†o/ra
        WITH a, totalIn, totalOut,
             CASE WHEN totalIn = 0 THEN 999999 
                  ELSE totalOut / totalIn 
             END AS outInRatio,
             CASE WHEN totalOut = 0 AND totalIn > 0 THEN 1
                  WHEN totalOut = 0 AND totalIn = 0 THEN 0
                  ELSE 0
             END AS sinkFlag
        
        // ƒê√°nh gi√° d√≤ng ti·ªÅn ƒë√°ng ng·ªù
        SET a.moneyFlowScore = CASE
            WHEN sinkFlag = 1 AND totalIn > 10000 THEN 0.95  // "H·ªë ƒëen" l·ªõn (ch·ªâ nh·∫≠n ti·ªÅn)
            WHEN outInRatio > 0.98 AND outInRatio < 1.02 AND totalIn > 5000 THEN 0.9  // C√¢n b·∫±ng ho√†n h·∫£o v·ªõi gi√° tr·ªã l·ªõn
            WHEN outInRatio > 0.95 AND outInRatio < 1.05 AND totalIn > 1000 THEN 0.8  // C√¢n b·∫±ng g·∫ßn ho√†n h·∫£o
            WHEN totalIn = 0 AND totalOut > 10000 THEN 0.85  // "Ngu·ªìn" l·ªõn (ch·ªâ g·ª≠i ti·ªÅn)
            ELSE 0.0
        END
        """
        self.db_manager.run_query(money_flow_query)
    
    def _detect_suspicious_communities(self):
        """Ph√°t hi·ªán c√°c c·ªông ƒë·ªìng ƒë√°ng ng·ªù trong ƒë·ªì th·ªã."""
        print("  - ƒêang ph√°t hi·ªán c√°c c·ªông ƒë·ªìng ƒë√°ng ng·ªù...")
        
        # Ph√°t hi·ªán c·ªông ƒë·ªìng ƒë√°ng ng·ªù
        community_query = """
        // Nh√≥m t√†i kho·∫£n theo c·ªông ƒë·ªìng
        MATCH (a:Account)
        WHERE a.communityId IS NOT NULL
        WITH a.communityId AS communityId, collect(a) AS communityAccounts
        
        // Ph√¢n t√≠ch c√°c giao d·ªãch trong c·ªông ƒë·ªìng
        UNWIND communityAccounts AS a
        MATCH (a)-[tx:SENT]->()
        WITH communityId, communityAccounts, count(tx) AS internalTxCount
        
        // Ph√¢n t√≠ch c√°c giao d·ªãch ra ngo√†i c·ªông ƒë·ªìng
        UNWIND communityAccounts AS a
        MATCH (a)-[tx:SENT]->()-[:RECEIVED]->(b:Account)
        WHERE NOT b IN communityAccounts
        WITH communityId, communityAccounts, internalTxCount, count(tx) AS externalTxCount
        
        // T√≠nh t·ª∑ l·ªá giao d·ªãch n·ªôi b·ªô
        WITH communityId, communityAccounts,
            CASE WHEN internalTxCount + externalTxCount = 0 THEN 0
                 ELSE internalTxCount / toFloat(internalTxCount + externalTxCount)
            END AS internalRatio,
            size(communityAccounts) AS communitySize
        
        // ƒê√°nh gi√° c·ªông ƒë·ªìng ƒë√°ng ng·ªù
        WITH communityId, communityAccounts, internalRatio, communitySize,
             CASE
                 WHEN communitySize >= 3 AND communitySize <= 10 AND internalRatio > 0.8 THEN 0.9
                 WHEN communitySize > 10 AND communitySize <= 20 AND internalRatio > 0.7 THEN 0.8
                 WHEN communitySize > 20 AND internalRatio > 0.6 THEN 0.7
                 WHEN internalRatio > 0.9 THEN 0.85
                 ELSE internalRatio * 0.5
             END AS suspiciousScore
        
        // G√°n ƒëi·ªÉm cho t·ª´ng t√†i kho·∫£n trong c·ªông ƒë·ªìng
        UNWIND communityAccounts AS a
        SET a.communitySuspiciousScore = suspiciousScore
        """
        self.db_manager.run_query(community_query)
        
        # Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh
        default_community_query = """
        MATCH (a:Account)
        WHERE a.communitySuspiciousScore IS NULL
        SET a.communitySuspiciousScore = 0
        """
        self.db_manager.run_query(default_community_query)
        
        # K·∫øt h·ª£p t·∫•t c·∫£ c√°c ƒëi·ªÉm ƒë√°nh ng·ªù
        final_score_query = """
        MATCH (a:Account)
        SET a.advancedFraudScore = (
            COALESCE(a.combinedScore, 0) * 0.25 +
            COALESCE(a.patternScore, 0) * 0.3 +
            COALESCE(a.temporalScore, 0) * 0.15 +
            COALESCE(a.cycleScore, 0) * 0.15 +
            COALESCE(a.moneyFlowScore, 0) * 0.1 +
            COALESCE(a.communitySuspiciousScore, 0) * 0.05
        )
        """
        self.db_manager.run_query(final_score_query)
        
        # Chu·∫©n h√≥a ƒëi·ªÉm cu·ªëi c√πng
        normalize_final_query = """
        MATCH (a:Account)
        WITH MIN(a.advancedFraudScore) AS min_score, MAX(a.advancedFraudScore) AS max_score
        MATCH (a:Account)
        SET a.advancedFraudScore = CASE 
            WHEN max_score = min_score THEN 0
            ELSE (a.advancedFraudScore - min_score) / (max_score - min_score)
        END
        """
        self.db_manager.run_query(normalize_final_query)
        
        # Truy·ªÅn advanced fraud score t·ª´ Account ƒë·∫øn Transaction
        propagate_score_query = """
        MATCH (a:Account)-[tx:SENT]->()
        SET tx.advancedAnomalyScore = a.advancedFraudScore
        """
        self.db_manager.run_query(propagate_score_query)
