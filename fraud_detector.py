from neo4j import GraphDatabase
import pandas as pd
import os
import time
from config import NEO4J_URI, NEO4J_USER, NEO4J_PASSWORD, BATCH_SIZE, MAX_NODES, MAX_RELATIONSHIPS

class FraudDetector:
    def __init__(self):
        self.driver = GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USER, NEO4J_PASSWORD))

    def check_data(self):
        """Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu trong database ch∆∞a"""
        with self.driver.session() as session:
            result = session.run("MATCH (n) RETURN count(n) as count")
            count = result.single()["count"]
            
            # L·∫•y th√™m th·ªëng k√™
            stats = {}
            try:
                accounts = session.run("MATCH (a:Account) RETURN count(a) as count").single()
                stats["accounts"] = accounts["count"] if accounts else 0
                
                transactions = session.run("MATCH ()-[r:SENT]->() RETURN count(r) as count").single()
                stats["transactions"] = transactions["count"] if transactions else 0
                
                has_analysis = session.run("MATCH (a:Account) WHERE a.fraud_score IS NOT NULL RETURN count(a) as count").single()
                stats["has_analysis"] = has_analysis["count"] > 0 if has_analysis else False
            except:
                stats = {"accounts": 0, "transactions": 0, "has_analysis": False}
                
            return count > 0, stats
        
    def clear_database(self):
        """X√≥a to√†n b·ªô d·ªØ li·ªáu trong database"""
        with self.driver.session() as session:
            try:
                # X√≥a c√°c indexes tr∆∞·ªõc (n·∫øu c√≥)
                try:
                    session.run("DROP INDEX ON :Account(id)")
                except:
                    pass
                    
                # X√≥a t·∫•t c·∫£ nodes v√† relationships
                session.run("MATCH (n) DETACH DELETE n")
                
                # Ki·ªÉm tra l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√£ x√≥a th√†nh c√¥ng
                result = session.run("MATCH (n) RETURN count(n) as count").single()
                is_empty = result["count"] == 0
                
                if is_empty:
                    print("ƒê√£ x√≥a th√†nh c√¥ng to√†n b·ªô d·ªØ li·ªáu t·ª´ database")
                else:
                    print(f"V·∫´n c√≤n {result['count']} nodes trong database")
                    
                return is_empty
            except Exception as e:
                print(f"L·ªói khi x√≥a database: {e}")
                return False
            
    def import_data(self, csv_path):
        """Import d·ªØ li·ªáu s·ª≠ d·ª•ng API Neo4j thay v√¨ LOAD CSV"""
        try:
            # ƒê·ªçc file CSV
            df = pd.read_csv(csv_path)
            print(f"ƒê√£ ƒë·ªçc file CSV: {len(df)} giao d·ªãch")
            
            # Ki·ªÉm tra c√°c c·ªôt b·∫Øt bu·ªôc
            required_columns = ['nameOrig', 'nameDest', 'amount', 'step', 'isFraud', 'type']
            for col in required_columns:
                if col not in df.columns:
                    raise ValueError(f"Thi·∫øu c·ªôt {col} trong file CSV")
            
            with self.driver.session() as session:
                # T·∫°o index v√† x√≥a d·ªØ li·ªáu c≈©
                session.run("CREATE INDEX IF NOT EXISTS FOR (a:Account) ON (a.id)")
                
                # L·∫•y danh s√°ch t√†i kho·∫£n ƒë·ªôc nh·∫•t
                all_accounts = set(df['nameOrig'].unique()) | set(df['nameDest'].unique())
                print(f"T·ªïng s·ªë t√†i kho·∫£n: {len(all_accounts)}")
                
                # Gi·ªõi h·∫°n s·ªë t√†i kho·∫£n n·∫øu c·∫ßn
                if len(all_accounts) > MAX_NODES:
                    print(f"Gi·ªõi h·∫°n s·ªë t√†i kho·∫£n t·ªëi ƒëa: {MAX_NODES}")
                    all_accounts = list(all_accounts)[:MAX_NODES]
                
                # 1. T·∫°o t√†i kho·∫£n (nodes)
                print("ƒêang t·∫°o t√†i kho·∫£n...")
                start_time = time.time()
                
                account_batches = [list(all_accounts)[i:i+BATCH_SIZE] for i in range(0, len(all_accounts), BATCH_SIZE)]
                for i, account_batch in enumerate(account_batches):
                    query = """
                    UNWIND $accounts AS id
                    MERGE (a:Account {id: id})
                    """
                    session.run(query, {"accounts": account_batch})
                    print(f"  ƒê√£ t·∫°o {(i+1)*BATCH_SIZE if (i+1)*BATCH_SIZE < len(all_accounts) else len(all_accounts)}/{len(all_accounts)} t√†i kho·∫£n")
                
                # 2. T·∫°o giao d·ªãch (relationships) - gi·ªõi h·∫°n s·ªë l∆∞·ª£ng n·∫øu c·∫ßn
                if len(df) > MAX_RELATIONSHIPS:
                    print(f"Gi·ªõi h·∫°n s·ªë giao d·ªãch t·ªëi ƒëa: {MAX_RELATIONSHIPS}")
                    df = df.head(MAX_RELATIONSHIPS)
                
                print("ƒêang t·∫°o giao d·ªãch...")
                tx_batches = [df.iloc[i:i+BATCH_SIZE] for i in range(0, len(df), BATCH_SIZE)]
                
                for i, batch_df in enumerate(tx_batches):
                    records = []
                    for _, row in batch_df.iterrows():
                        # Ch·ªâ th√™m giao d·ªãch n·∫øu c·∫£ hai t√†i kho·∫£n ƒë·ªÅu trong danh s√°ch t√†i kho·∫£n ƒë√£ l·ªçc
                        if row['nameOrig'] in all_accounts and row['nameDest'] in all_accounts:
                            records.append({
                                "from_ac": row['nameOrig'],
                                "to_ac": row['nameDest'],
                                "amount": float(row['amount']),
                                "step": int(row['step']),
                                "is_fraud": int(row['isFraud']),
                                "type": row['type']
                            })
                    
                    query = """
                    UNWIND $batch AS tx
                    MATCH (from:Account {id: tx.from_ac})
                    MATCH (to:Account {id: tx.to_ac})
                    CREATE (from)-[r:SENT {
                        amount: tx.amount,
                        step: tx.step,
                        is_fraud: tx.is_fraud,
                        type: tx.type
                    }]->(to)
                    """
                    session.run(query, {"batch": records})
                    
                    progress = (i+1)/len(tx_batches)*100
                    print(f"  ƒê√£ t·∫°o {progress:.1f}% giao d·ªãch ({(i+1)*BATCH_SIZE if (i+1)*BATCH_SIZE < len(df) else len(df)}/{len(df)})")
                
                print(f"Ho√†n th√†nh import trong {time.time() - start_time:.2f}s")
                return True
                
        except Exception as e:
            print(f"L·ªói khi import d·ªØ li·ªáu: {e}")
            return False
        
    def process_transaction_stats(self):
        """T√≠nh to√°n th·ªëng k√™ giao d·ªãch v·ªõi c√°ch ti·∫øp c·∫≠n hi·ªáu qu·∫£ h∆°n"""
        with self.driver.session() as session:
            print("üîç ƒêang t√≠nh giao d·ªãch ra/v√†o (ph∆∞∆°ng ph√°p t·ªëi ∆∞u)...")
            
            # L·∫•y t·ªïng s·ªë t√†i kho·∫£n ƒë·ªÉ t√≠nh batch
            total = session.run("MATCH (a:Account) RETURN count(a) AS count").single()["count"]
            print(f"  T·ªïng s·ªë t√†i kho·∫£n c·∫ßn x·ª≠ l√Ω: {total}")
            
            # T√≠nh k√≠ch th∆∞·ªõc batch ph√π h·ª£p - m·ªói batch x·ª≠ l√Ω kho·∫£ng 1000 t√†i kho·∫£n
            batch_size = 1000
            total_batches = (total + batch_size - 1) // batch_size
            
            # X·ª≠ l√Ω theo batch nh·ªè h∆°n
            for i in range(total_batches):
                start = i * batch_size
                end = min((i + 1) * batch_size, total)
                
                # Truy v·∫•n s·ª≠ d·ª•ng SKIP v√† LIMIT thay v√¨ modulo
                outgoing_query = """
                    MATCH (a:Account)
                    WITH a ORDER BY id(a)
                    SKIP $skip LIMIT $limit
                    
                    WITH a
                    OPTIONAL MATCH (a)-[outTx:SENT]->()
                    WITH a, count(outTx) AS outCount, sum(outTx.amount) AS outAmount
                    SET a.out_count = outCount, a.out_amount = outAmount
                    RETURN count(*) as processed
                """
                
                # Th·ª±c thi v√† theo d√µi ti·∫øn ƒë·ªô
                result = session.run(outgoing_query, skip=start, limit=batch_size).single()
                
                # C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
                # print(f"  ƒê√£ x·ª≠ l√Ω giao d·ªãch ra: {i+1}/{total_batches} batches ({min(end, total)}/{total} t√†i kho·∫£n)")
            
            # T∆∞∆°ng t·ª± v·ªõi giao d·ªãch v√†o, nh∆∞ng t√°ch ri√™ng ƒë·ªÉ t·ªëi ∆∞u
            for i in range(total_batches):
                start = i * batch_size
                end = min((i + 1) * batch_size, total)
                
                incoming_query = """
                    MATCH (a:Account)
                    WITH a ORDER BY id(a)
                    SKIP $skip LIMIT $limit
                    
                    WITH a
                    OPTIONAL MATCH ()-[inTx:SENT]->(a)
                    WITH a, count(inTx) AS inCount, sum(inTx.amount) AS inAmount
                    SET a.in_count = inCount, a.in_amount = inAmount
                    RETURN count(*) as processed
                """
                
                # Th·ª±c thi v√† theo d√µi ti·∫øn ƒë·ªô
                result = session.run(incoming_query, skip=start, limit=batch_size).single()
                
                # C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
                # print(f"  ƒê√£ x·ª≠ l√Ω giao d·ªãch v√†o: {i+1}/{total_batches} batches ({min(end, total)}/{total} t√†i kho·∫£n)")
                
    def process_account_behaviors(self):
        """ƒê√°nh d·∫•u h√†nh vi b·∫•t th∆∞·ªùng theo batch v·ªõi ti√™u ch√≠ ch·∫∑t ch·∫Ω h∆°n ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c"""
        with self.driver.session() as session:
            print("üîç ƒêang ƒë√°nh d·∫•u h√†nh vi b·∫•t th∆∞·ªùng (ph∆∞∆°ng ph√°p t·ªëi ∆∞u)...")
            
            # L·∫•y t·ªïng s·ªë t√†i kho·∫£n
            total = session.run("MATCH (a:Account) RETURN count(a) AS count").single()["count"]
            print(f"  T·ªïng s·ªë t√†i kho·∫£n c·∫ßn ph√¢n t√≠ch: {total}")
            
            # X√°c ƒë·ªãnh k√≠ch th∆∞·ªõc batch
            batch_size = 1000
            total_batches = (total + batch_size - 1) // batch_size
            
            # X·ª≠ l√Ω theo batch v·ªõi ti√™u ch√≠ ch·∫∑t ch·∫Ω h∆°n
            for i in range(total_batches):
                start = i * batch_size
                
                # Truy v·∫•n theo batch v·ªõi c√°c ti√™u ch√≠ m·ªõi
                query = """
                    MATCH (a:Account)
                    WITH a ORDER BY id(a)
                    SKIP $skip LIMIT $limit
                    
                    WHERE a.out_count IS NOT NULL AND a.in_count IS NOT NULL
                    WITH a, 
                        COALESCE(a.out_count, 0) AS outCount, 
                        COALESCE(a.in_count, 0) AS inCount,
                        COALESCE(a.out_amount, 0) AS outAmount,
                        COALESCE(a.in_amount, 0) AS inAmount
                        
                    // T√≠nh ch√™nh l·ªách s·ªë l∆∞·ª£ng v√† gi√° tr·ªã giao d·ªãch
                    WITH a, outCount, inCount, outAmount, inAmount,
                         abs(outCount - inCount) AS txDiff,
                         abs(outAmount - inAmount) AS amountDiff
                    
                    // G√°n c√°c ch·ªâ s·ªë b·∫•t th∆∞·ªùng v·ªõi ƒëi·ªÅu ki·ªán nghi√™m ng·∫∑t h∆°n 
                    SET a.tx_imbalance = CASE 
                            WHEN outCount + inCount < 3 THEN 0  // Y√™u c·∫ßu t·ªëi thi·ªÉu 3 giao d·ªãch ƒë·ªÉ t√≠nh imbalance
                            WHEN outCount + inCount = 0 THEN 0
                            ELSE txDiff / (outCount + inCount)
                        END,
                        // G√°n ch·ªâ s·ªë imbalance theo gi√° tr·ªã
                        a.amount_imbalance = CASE
                            WHEN outAmount + inAmount = 0 THEN 0
                            WHEN outAmount + inAmount < 50000 THEN 0  // Y√™u c·∫ßu t·ªïng gi√° tr·ªã t·ªëi thi·ªÉu 50k
                            ELSE amountDiff / (outAmount + inAmount)
                        END,
                        // Ch·ªâ ƒë√°nh d·∫•u "ch·ªâ g·ª≠i" khi m·∫•t c√¢n b·∫±ng ho√†n to√†n v√† c√≥ nhi·ªÅu giao d·ªãch ra 
                        a.only_sender = CASE 
                            WHEN outCount >= 3 AND inCount = 0 THEN true 
                            ELSE false 
                        END,
                        // Y√™u c·∫ßu kh·∫Øt khe h∆°n cho giao d·ªãch kh·ªëi l∆∞·ª£ng cao
                        a.high_tx_volume = CASE 
                            WHEN outCount + inCount > 8 THEN true 
                            ELSE false 
                        END
                        
                    RETURN count(*) as processed
                """
                
                # Th·ª±c thi truy v·∫•n
                result = session.run(query, skip=start, limit=batch_size).single()
                processed = result["processed"] if result else 0
                  # Hi·ªÉn th·ªã ti·∫øn ƒë·ªô
                # print(f"  Batch {i+1}/{total_batches}: ƒê√£ x·ª≠ l√Ω {processed} t√†i kho·∫£n")
                
    def process_transaction_anomalies(self):
        """Ph√¢n t√≠ch giao d·ªãch b·∫•t th∆∞·ªùng theo batch v·ªõi ti√™u ch√≠ ch·∫∑t ch·∫Ω h∆°n"""
        with self.driver.session() as session:
            print("üîç ƒêang ph√¢n t√≠ch giao d·ªãch c√≥ gi√° tr·ªã b·∫•t th∆∞·ªùng...")
            
            # L·∫•y t·ªïng s·ªë t√†i kho·∫£n
            total = session.run("MATCH (a:Account) RETURN count(a) AS count").single()["count"]
            batch_size = 1000
            total_batches = (total + batch_size - 1) // batch_size
            
            # X√≥a ƒë√°nh d·∫•u c≈©
            session.run("MATCH (a:Account) REMOVE a.tx_anomaly")
              # Ph√¢n t√≠ch theo batch v·ªõi ti√™u ch√≠ ch·∫∑t ch·∫Ω h∆°n
            for i in range(total_batches):
                start = i * batch_size
                
                query = """
                    MATCH (a:Account)
                    WITH a ORDER BY id(a)
                    SKIP $skip LIMIT $limit
                          WITH a
                    OPTIONAL MATCH (a)-[tx:SENT]->()
                    WITH a, avg(tx.amount) AS avgAmount, max(tx.amount) AS maxAmount, count(tx) AS txCount,
                         collect(tx.amount) as amounts
                      // Ph√°t hi·ªán giao d·ªãch b·∫•t th∆∞·ªùng v·ªõi ƒëi·ªÅu ki·ªán nghi√™m ng·∫∑t h∆°n - gi·∫£m false positives
                    WHERE (
                        // ƒêi·ªÅu ki·ªán 1: Giao d·ªãch cao b·∫•t th∆∞·ªùng v√† c√≥ nhi·ªÅu giao d·ªãch
                        (maxAmount > avgAmount * 6 AND txCount >= 3) OR   // Gi·∫£m ng∆∞·ª°ng t·ª´ 7x xu·ªëng 6x, t·ª´ >=4 xu·ªëng >=3
                        
                        // ƒêi·ªÅu ki·ªán 2: Ch√™nh l·ªách r·∫•t l·ªõn gi·ªØa max v√† average
                        (maxAmount > 150000 AND avgAmount < 30000 AND txCount >= 2) OR // Gi·∫£m ng∆∞·ª°ng t·ª´ 200k xu·ªëng 150k, t·ª´ >=3 xu·ªëng >=2
                        
                        // ƒêi·ªÅu ki·ªán 3: Nhi·ªÅu giao d·ªãch cao b·∫•t th∆∞·ªùng v√† c√≥ gi√° tr·ªã ch·ªánh l·ªách l·ªõn 
                        (size([x in amounts WHERE x > avgAmount * 4]) >= 2 AND 
                         txCount >= 3 AND 
                         maxAmount > avgAmount * 5) OR  // Gi·∫£m ng∆∞·ª°ng ƒë·ªÉ tƒÉng kh·∫£ nƒÉng ph√°t hi·ªán
                        
                        // ƒêi·ªÅu ki·ªán 4: M·∫´u giao d·ªãch b·∫•t th∆∞·ªùng v·ªõi ƒëi·ªÅu ki·ªán chu·ªói giao d·ªãch
                        (size([x in amounts WHERE x > 60000]) >= 2 AND   // Gi·∫£m ng∆∞·ª°ng t·ª´ 75k xu·ªëng 60k, t·ª´ >=3 xu·ªëng >=2
                         avgAmount < 20000 AND
                         txCount >= 2)  // Gi·∫£m y√™u c·∫ßu t·ªëi thi·ªÉu t·ª´ 3 xu·ªëng 2 giao d·ªãch
                    )                    
                    SET a.tx_anomaly = true
                    RETURN count(*) as processed
                """
                
                result = session.run(query, skip=start, limit=batch_size).single()
                processed = result["processed"] if result else 0                
                # Hi·ªÉn th·ªã ti·∫øn ƒë·ªô
                # print(f"  Batch {i+1}/{total_batches}: ƒê√£ ph√°t hi·ªán {processed} t√†i kho·∫£n b·∫•t th∆∞·ªùng")
            
            # X√°c ƒë·ªãnh t√†i kho·∫£n c√≥ giao d·ªãch gi√° tr·ªã cao v·ªõi ƒëi·ªÅu ki·ªán nghi√™m ng·∫∑t h∆°n
            print("üîç ƒêang x√°c ƒë·ªãnh t√†i kho·∫£n c√≥ giao d·ªãch gi√° tr·ªã cao...")
            session.run("""
                MATCH (a:Account)
                OPTIONAL MATCH (a)-[tx:SENT]->()
                WITH a, tx.amount as amount, count(tx) as tx_count
                WHERE tx_count > 0
                WITH a, 
                     collect(amount) as amounts,
                     avg(amount) as avg_amount,
                     max(amount) as max_amount,
                     count(amount) as num_transactions                WHERE 
                    max_amount > 80000 AND  // Gi·∫£m ng∆∞·ª°ng t·ª´ 100000 xu·ªëng 80000
                    max_amount > avg_amount * 3 AND  // Gi·∫£m ng∆∞·ª°ng t·ª´ 4 xu·ªëng 3
                    size([x IN amounts WHERE x > 60000]) >= 1 AND  // Gi·∫£m ng∆∞·ª°ng t·ª´ 80k xu·ªëng 60k, t·ª´ 2 xu·ªëng 1
                    num_transactions >= 2  // Gi·∫£m y√™u c·∫ßu t·ª´ 3 xu·ªëng 2 giao d·ªãch
                SET a.high_value_tx = true
            """)
                  
    def calculate_fraud_scores(self):
        """K·∫øt h·ª£p t·∫•t c·∫£ ƒëi·ªÉm ƒë·ªÉ t√≠nh ƒëi·ªÉm gian l·∫≠n - c·∫£i ti·∫øn ƒë·ªÉ t·∫≠n d·ª•ng t·ªët h∆°n m·ªëi quan h·ªá trong ƒë·ªì th·ªã"""
        with self.driver.session() as session:
            print("ƒêang t√≠nh to√°n fraud_score cho t·∫•t c·∫£ t√†i kho·∫£n...")
            
            # ƒê·∫ßu ti√™n, x√°c ƒë·ªãnh c√°c t√†i kho·∫£n li√™n quan ƒë·∫øn giao d·ªãch gian l·∫≠n ƒë√£ bi·∫øt
            session.run("""
                MATCH (s:Account)-[r:SENT {is_fraud: 1}]->(t:Account)
                SET s.known_fraud = true, t.known_fraud = true
            """)
              # Tr∆∞·ªõc ti√™n, t√≠nh ƒëi·ªÉm c∆° b·∫£n d·ª±a tr√™n thu·ªôc t√≠nh
            base_score_query = """
                MATCH (a:Account)
                
                // ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu thu·ªôc t√≠nh kh√¥ng t·ªìn t·∫°i
                WITH a, 
                    COALESCE(a.pagerank_score, 0) AS pagerank,
                    COALESCE(a.degree_score, 0) AS degree,
                    COALESCE(a.similarity_score, 0) AS similarity,
                    COALESCE(a.tx_imbalance, 0) AS imbalance,
                    COALESCE(a.high_tx_volume, false) AS high_volume,
                    COALESCE(a.tx_anomaly, false) AS anomaly,
                    COALESCE(a.only_sender, false) AS only_sender,
                    COALESCE(a.high_value_tx, false) AS high_value                // T√≠nh ƒëi·ªÉm c∆° b·∫£n d·ª±a tr√™n c√°c thu·ªôc t√≠nh - t·ªëi ∆∞u cho precision (gi·∫£m false positives)
                WITH a,
                    // TƒÉng ·∫£nh h∆∞·ªüng c√°c ch·ªâ s·ªë c·∫•u tr√∫c
                    pagerank * 0.05 +
                    degree * 0.03 + 
                    similarity * 0.02 +
                    
                    // T·∫≠p trung v√†o c√°c d·∫•u hi·ªáu h√†nh vi b·∫•t th∆∞·ªùng r·∫•t m·∫°nh, y√™u c·∫ßu ng∆∞·ª°ng cao h∆°n
                    CASE 
                        WHEN imbalance > 0.8 THEN 0.40  // TƒÉng ƒëi·ªÉm cho imbalance c·ª±c cao
                        WHEN imbalance > 0.65 THEN 0.30
                        WHEN imbalance > 0.5 THEN 0.20
                        ELSE imbalance * 0.15  // TƒÉng ·∫£nh h∆∞·ªüng cho c√°c imbalance th·∫•p
                    END +
                    
                    // K·∫øt h·ª£p nhi·ªÅu d·∫•u hi·ªáu v√† y√™u c·∫ßu ng∆∞·ª°ng cao h∆°n
                    CASE 
                        WHEN high_volume AND anomaly AND imbalance > 0.65 THEN 0.35  // TƒÉng ƒëi·ªÉm
                        WHEN high_volume AND anomaly AND imbalance > 0.5 THEN 0.25
                        WHEN high_volume AND imbalance > 0.6 THEN 0.15
                        WHEN high_volume THEN 0.05
                        ELSE 0 
                    END +
                    
                    // TƒÉng ƒë·ªô ch√≠nh x√°c cho anomaly detection
                    CASE 
                        WHEN anomaly AND high_value AND imbalance > 0.6 THEN 0.40  // TƒÉng ƒëi·ªÉm
                        WHEN anomaly AND high_value AND imbalance > 0.4 THEN 0.30
                        WHEN anomaly AND high_value THEN 0.20
                        WHEN anomaly THEN 0.10
                        ELSE 0 
                    END +
                    
                    // C√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát - ch·ªâ gi·ªØ ƒëi·ªÉm cao cho known_fraud ch·∫Øc ch·∫Øn
                    CASE WHEN a.known_fraud THEN 0.90 ELSE 0 END +
                    CASE WHEN high_value AND only_sender AND imbalance > 0.5 THEN 0.25
                         WHEN high_value AND only_sender THEN 0.12
                         WHEN high_value THEN 0.07
                         ELSE 0 
                    END AS base_score
                
                // Thi·∫øt l·∫≠p ƒëi·ªÉm c∆° b·∫£n
                SET a.base_score = base_score
                
                RETURN count(a) AS updated_count
            """
            
            result = session.run(base_score_query)
            print(f"ƒê√£ t√≠nh ƒëi·ªÉm c∆° b·∫£n cho {result.single()['updated_count']} t√†i kho·∫£n")
              # Ti·∫øp theo, ƒëi·ªÅu ch·ªânh ƒëi·ªÉm d·ª±a tr√™n m·ªëi quan h·ªá giao d·ªãch - th√™m ƒëi·ªÅu ki·ªán ch·∫∑t ch·∫Ω h∆°n
            transaction_pattern_query = """
                // ƒê·∫ßu ti√™n, t√¨m c√°c m·∫´u giao d·ªãch b·∫•t th∆∞·ªùng v·ªõi ƒëi·ªÅu ki·ªán nghi√™m ng·∫∑t h∆°n
                MATCH (sender:Account)-[tx:SENT]->(receiver:Account)
                WHERE tx.amount > 50000  // TƒÉng ng∆∞·ª°ng gi√° tr·ªã giao d·ªãch t·ª´ 30000 l√™n 50000
                
                // T√≠nh ƒëi·ªÉm m·ªëi quan h·ªá d·ª±a tr√™n ƒë·∫∑c ƒëi·ªÉm giao d·ªãch
                WITH sender, receiver, collect(tx) AS transactions,
                     sum(tx.amount) AS total_amount,
                     count(tx) AS tx_count,
                     sender.base_score AS sender_score,
                     receiver.base_score AS receiver_score,
                     sender.tx_imbalance AS sender_imbalance,
                     receiver.tx_imbalance AS receiver_imbalance
                
                // N·∫øu c√≥ nhi·ªÅu giao d·ªãch gi√° tr·ªã l·ªõn gi·ªØa hai t√†i kho·∫£n v·ªõi ƒëi·ªÉm cao V√Ä imbalance cao
                WHERE tx_count >= 2 AND total_amount > 80000 AND 
                     ((sender_score > 0.6 AND sender_imbalance > 0.5) OR 
                      (receiver_score > 0.6 AND receiver_imbalance > 0.5))
                
                // TƒÉng ƒëi·ªÉm h·∫°n ch·∫ø h∆°n cho sender v√† receiver
                WITH sender, receiver, 
                     CASE 
                         WHEN sender_score > 0.75 AND receiver_score > 0.6 THEN 0.18
                         WHEN sender_score > 0.6 OR receiver_score > 0.6 THEN 0.12
                         ELSE 0.08
                     END AS boost
                
                // √Åp d·ª•ng tƒÉng ƒëi·ªÉm
                SET sender.relation_boost = COALESCE(sender.relation_boost, 0) + boost,
                    receiver.relation_boost = COALESCE(receiver.relation_boost, 0) + boost
                
                RETURN count(sender) + count(receiver) AS boosted_accounts
            """
            
            relation_result = session.run(transaction_pattern_query)
            boosted_accounts = relation_result.single()["boosted_accounts"] if relation_result else 0
            print(f"ƒê√£ ƒëi·ªÅu ch·ªânh ƒëi·ªÉm cho {boosted_accounts} t√†i kho·∫£n d·ª±a tr√™n m·∫´u giao d·ªãch")
              # Ph√°t hi·ªán v√≤ng tr√≤n giao d·ªãch (chu tr√¨nh) - ch·∫∑t ch·∫Ω h∆°n
            cycle_detection_query = """
                // Ph√°t hi·ªán v√† ph√¢n t√≠ch chu tr√¨nh giao d·ªãch v·ªõi ƒëi·ªÅu ki·ªán ch·∫∑t ch·∫Ω h∆°n
                MATCH path = (a:Account)-[r:SENT*2..4]->(a)
                WITH path, 
                     [node IN nodes(path) | node] AS cycle_nodes,
                     reduce(total = 0, r IN relationships(path) | total + r.amount) AS cycle_amount,
                     reduce(max_val = 0, r IN relationships(path) | CASE WHEN r.amount > max_val THEN r.amount ELSE max_val END) AS max_tx_amount
                  WHERE 
                    cycle_amount > 80000 AND  // Gi·∫£m ng∆∞·ª°ng gi√° tr·ªã chu tr√¨nh t·ª´ 100000 xu·ªëng 80000
                    max_tx_amount > 30000      // Gi·∫£m y√™u c·∫ßu v·ªÅ gi√° tr·ªã giao d·ªãch l·ªõn nh·∫•t t·ª´ 40000 xu·ªëng 30000
                
                // L·ªçc v√† x·ª≠ l√Ω t·ª´ng t√†i kho·∫£n trong chu tr√¨nh v·ªõi ƒëi·ªÅu ki·ªán ch·∫∑t ch·∫Ω h∆°n
                WITH DISTINCT cycle_nodes, cycle_amount, max_tx_amount
                UNWIND cycle_nodes AS cycle_account
                WITH cycle_account, cycle_nodes, cycle_amount, max_tx_amount,
                     count(CASE WHEN cycle_account.tx_anomaly THEN 1 END) as anomalies,
                     count(CASE WHEN cycle_account.high_value_tx THEN 1 END) as high_value_txs,
                     avg(CASE WHEN cycle_account.tx_imbalance IS NOT NULL THEN cycle_account.tx_imbalance ELSE 0 END) as avg_imbalance                WHERE 
                    anomalies > 0 OR          // Relax requirement - need anomalies OR high_value_txs (changed from AND)
                    high_value_txs > 0 AND     
                    cycle_account.tx_imbalance > 0.4 AND    // Decrease threshold from 0.5 to 0.4
                    avg_imbalance > 0.35        // Decrease avg_imbalance threshold from 0.4 to 0.35
                  // TƒÉng ƒëi·ªÉm d·ª±a tr√™n ƒë·∫∑c ƒëi·ªÉm chu tr√¨nh, tƒÉng ƒëi·ªÉm boost
                SET 
                    cycle_account.cycle_boost = CASE
                        WHEN size(cycle_nodes) = 2 AND cycle_amount > 120000 THEN 0.45  // TƒÉng t·ª´ 0.35 l√™n 0.45
                        WHEN size(cycle_nodes) = 3 AND cycle_amount > 100000 THEN 0.35  // TƒÉng t·ª´ 0.25 l√™n 0.35
                        WHEN size(cycle_nodes) <= 4 AND cycle_amount > 80000 THEN 0.25  // TƒÉng t·ª´ 0.15 l√™n 0.25
                        ELSE 0.15  // TƒÉng t·ª´ 0.10 l√™n 0.15
                    END,
                    cycle_account.known_fraud = CASE 
                        WHEN size(cycle_nodes) <= 3 AND cycle_amount > 120000 THEN true  // Gi·∫£m ng∆∞·ª°ng t·ª´ 150000 xu·ªëng 120000
                        ELSE cycle_account.known_fraud 
                    END
                
                RETURN count(DISTINCT cycle_account) AS cycle_accounts
            """
            
            cycle_result = session.run(cycle_detection_query)
            cycle_accounts = cycle_result.single()["cycle_accounts"] if cycle_result else 0
            print(f"ƒê√£ ph√°t hi·ªán {cycle_accounts} t√†i kho·∫£n thu·ªôc c√°c chu tr√¨nh giao d·ªãch")
              # Cu·ªëi c√πng, t·ªïng h·ª£p t·∫•t c·∫£ c√°c ƒëi·ªÉm ƒë·ªÉ t·∫°o ƒëi·ªÉm fraud_score cu·ªëi c√πng v·ªõi ƒëi·ªÅu ch·ªânh ƒë·ªÉ tƒÉng precision
            final_score_query = """
                MATCH (a:Account)
                
                // T·ªïng h·ª£p t·∫•t c·∫£ c√°c ƒëi·ªÉm boost
                WITH a,
                     COALESCE(a.base_score, 0) AS base,
                     COALESCE(a.relation_boost, 0) AS relation,
                     COALESCE(a.cycle_boost, 0) AS cycle
                  // T√≠nh ƒëi·ªÉm t·ªïng h·ª£p v·ªõi tr·ªçng s·ªë m·ªõi, nh·∫•n m·∫°nh c·∫•u tr√∫c chu tr√¨nh (cycle)
                WITH a, 
                     base * 0.85 +  // TƒÉng ·∫£nh h∆∞·ªüng c·ªßa base score (0.85 thay v√¨ 0.75)
                     relation * 1.0 +  // TƒÉng ·∫£nh h∆∞·ªüng relation boost
                     cycle * 1.2 AS combined_score  // TƒÉng ·∫£nh h∆∞·ªüng c·ªßa cycle boost
                
                // Th√™m m·ªôt ng∆∞·ª°ng c∆° b·∫£n ƒë·ªÉ gi·∫£m ƒëi·ªÉm th·∫•p v√† th√™m nhi·ªÖu ng·∫´u nhi√™n nh·ªè (0.99-1.01)
                WITH a, 
                     CASE
                        WHEN combined_score < 0.3 THEN combined_score * 0.90  // Gi·∫£m √≠t h∆°n cho ƒëi·ªÉm th·∫•p
                        ELSE combined_score 
                     END * (0.99 + rand()*0.02) AS final_score
                
                // ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° 1.0
                SET a.fraud_score = CASE 
                    WHEN final_score > 1.0 THEN 1.0 
                    WHEN final_score < 0 THEN 0
                    ELSE final_score
                END
                
                RETURN count(a) AS updated_count
            """
            
            final_result = session.run(final_score_query)
            print(f"ƒê√£ ho√†n th√†nh t√≠nh fraud_score cho {final_result.single()['updated_count']} t√†i kho·∫£n")

    def finalize_and_evaluate(self):
        """Chu·∫©n h√≥a ƒëi·ªÉm v√† ƒë√°nh gi√° k·∫øt qu·∫£ theo batch"""
        with self.driver.session() as session:
            print("üîç ƒêang ho√†n t·∫•t ph√¢n t√≠ch...")
            
            # L·∫•y t·ªïng s·ªë t√†i kho·∫£n
            total = session.run("MATCH (a:Account) RETURN count(a) AS count").single()["count"]
            batch_size = 2000  # Batch l·ªõn h∆°n cho c√°c truy v·∫•n ƒë∆°n gi·∫£n
            total_batches = (total + batch_size - 1) // batch_size
            
            # Chu·∫©n h√≥a ƒëi·ªÉm theo batch
            print("  ƒêang chu·∫©n h√≥a ƒëi·ªÉm cu·ªëi c√πng...")
            for i in range(total_batches):
                start = i * batch_size
                
                session.run("""
                    MATCH (a:Account)
                    WITH a ORDER BY id(a)
                    SKIP $skip LIMIT $limit
                    
                    SET a.fraud_score = 
                        CASE
                            WHEN a.fraud_score > 1.0 THEN 1.0
                            WHEN a.fraud_score < 0.0 THEN 0.0
                            WHEN a.fraud_score IS NULL THEN 0.1
                            ELSE a.fraud_score
                        END
                """, skip=start, limit=batch_size)
                
            # ƒê√°nh gi√° hi·ªáu qu·∫£ ph√°t hi·ªán - t·ªëi ∆∞u truy v·∫•n ban ƒë·∫ßu
            print("  ƒêang ƒë√°nh d·∫•u t√†i kho·∫£n gian l·∫≠n th·ª±c s·ª±...")
            session.run("""
                MATCH (a:Account)
                WHERE exists((a)-[:SENT {is_fraud: 1}]->()) OR exists((a)<-[:SENT {is_fraud: 1}]-())
                SET a.real_fraud = true
            """)

    def process_high_risk_communities(self):
        """Phi√™n b·∫£n t·ªëi ∆∞u h∆°n cho x·ª≠ l√Ω c·ªông ƒë·ªìng"""
        with self.driver.session() as session:
            print("üîç ƒêang t√¨m c√°c c·ªông ƒë·ªìng c√≥ ƒëi·ªÉm gian l·∫≠n cao (phi√™n b·∫£n t·ªëi ∆∞u)...")              # L·ªçc c·ªông ƒë·ªìng v·ªõi ti√™u ch√≠ ch·∫∑t ch·∫Ω h∆°n ƒë·ªÉ gi·∫£m false positives
            high_risk_query = """                MATCH (a:Account)
                WHERE a.community IS NOT NULL AND a.fraud_score > 0.6 // Gi·∫£m ng∆∞·ª°ng ƒëi·ªÉm t·ª´ 0.8 xu·ªëng 0.6
                WITH a.community AS comm, count(*) AS size, 
                     avg(a.fraud_score) AS avg_score,
                     count(CASE WHEN a.tx_anomaly THEN 1 END) as anomaly_count,
                     count(CASE WHEN a.high_value_tx THEN 1 END) as high_value_count
                WHERE size >= 2 AND size <= 10  // M·ªü r·ªông k√≠ch th∆∞·ªõc c·ªông ƒë·ªìng
                  AND avg_score > 0.65  // Gi·∫£m ng∆∞·ª°ng ƒëi·ªÉm trung b√¨nh t·ª´ 0.8 xu·ªëng 0.65
                  AND anomaly_count >= size * 0.4  // Gi·∫£m t·ª∑ l·ªá y√™u c·∫ßu v·ªÅ anomaly t·ª´ 0.5 xu·ªëng 0.4
                  AND high_value_count >= 1  // Gi·∫£m y√™u c·∫ßu t·ª´ 2 xu·ªëng 1 giao d·ªãch gi√° tr·ªã cao
                RETURN comm, size, avg_score
                ORDER BY avg_score DESC
                LIMIT 20 // TƒÉng t·ª´ 15 l√™n 20
            """
            
            # L·∫•y c√°c c·ªông ƒë·ªìng nguy c∆° cao trong m·ªôt l·∫ßn truy v·∫•n
            high_risk_comms = session.run(high_risk_query).data()
            
            print(f"üîç T√¨m th·∫•y {len(high_risk_comms)} c·ªông ƒë·ªìng c√≥ ƒëi·ªÉm gian l·∫≠n cao")
            
            # X·ª≠ l√Ω t·ª´ng c·ªông ƒë·ªìng
            if high_risk_comms:
                batch_size = 3
                comms_to_process = [rec['comm'] for rec in high_risk_comms]
                for i in range(0, len(comms_to_process), batch_size):
                    batch = comms_to_process[i:i+batch_size]
                    
                    # Thay ƒë·ªïi ƒëi·ªÅu ki·ªán boost ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c
                    session.run("""
                        UNWIND $communities AS comm
                        MATCH (member:Account)
                          // ƒêi·ªÅu ki·ªán √≠t nghi√™m ng·∫∑t h∆°n v√† boost l·ªõn h∆°n (10% thay v√¨ 5%)
                        WHERE member.community = comm 
                          AND member.fraud_score > 0.4 AND member.fraud_score < 0.7 // Gi·∫£m ng∆∞·ª°ng d∆∞·ªõi v√† tr√™n
                          AND (member.tx_anomaly = true OR member.high_value_tx = true OR member.tx_imbalance > 0.4) // Th√™m ƒëi·ªÅu ki·ªán imbalance
                        
                        // Boost l·ªõn h∆°n ƒë·ªÉ tƒÉng kh·∫£ nƒÉng ph√°t hi·ªán
                        SET member.fraud_score = member.fraud_score * 1.1
                    """, communities=batch)
                    
                    print(f"  ƒê√£ x·ª≠ l√Ω {min(i+batch_size, len(comms_to_process))}/{len(comms_to_process)} c·ªông ƒë·ªìng")

    def analyze_fraud(self):
        """Ch·∫°y ph√¢n t√≠ch gian l·∫≠n v·ªõi c√°c thu·∫≠t to√°n ƒë·ªì th·ªã - phi√™n b·∫£n kh√¥ng s·ª≠ d·ª•ng is_fraud"""
        with self.driver.session() as session:
            # X√≥a d·ªØ li·ªáu ph√¢n t√≠ch c≈©
            print("üîç ƒêang x√≥a ph√¢n t√≠ch c≈©...")
            session.run("""
                MATCH (a:Account) 
                REMOVE a.fraud_score, a.community, a.pagerank_score, 
                    a.degree_score, a.similarity_score, a.path_score, a.known_fraud
            """)

            # Th√™m ƒëo·∫°n n√†y ƒë·ªÉ x√≥a SIMILAR_TO relationships
            print("üîç ƒêang x√≥a m·ªëi quan h·ªá t·ª´ ph√¢n t√≠ch tr∆∞·ªõc...")
            session.run("""
                // X√≥a t·∫•t c·∫£ m·ªëi quan h·ªá SIMILAR_TO
                MATCH ()-[r:SIMILAR_TO]->()
                DELETE r
            """)
            
            # T·∫°o index
            session.run("CREATE INDEX IF NOT EXISTS FOR (a:Account) ON (a.id)")
            
            try:
                # Thay th·∫ø l·ªánh x√≥a projected graph c≈©
                print("üîç ƒêang x√≥a projected graph c≈©...")
                result = session.run("""
                    CALL gds.graph.list()
                    YIELD graphName
                    WHERE graphName = 'fraud_graph'
                    RETURN count(*) > 0 AS exists
                """).single()

                if result and result.get('exists', False):
                    print("  ƒê√£ t√¨m th·∫•y projected graph trong danh s√°ch, ƒëang x√≥a...")
                    session.run("CALL gds.graph.drop('fraud_graph', false)")
                else:
                    print("  Kh√¥ng t√¨m th·∫•y 'fraud_graph' trong danh s√°ch.")
                    
                # 1. T·∫°o projected graph (ch·ªâ d√πng amount, kh√¥ng d√πng is_fraud)
                print("üîç ƒêang t·∫°o projected graph...")
                session.run("""
                    CALL gds.graph.project(
                        'fraud_graph',
                        'Account',
                        'SENT',
                        {
                            relationshipProperties: {
                                amount: {property: 'amount', defaultValue: 0.0}
                            }
                        }
                    )
                """)
                
                # 2. Degree Centrality - ƒêo l∆∞·ªùng s·ªë k·∫øt n·ªëi
                print("üîç ƒêang t√≠nh Degree Centrality...")
                session.run("""
                    CALL gds.degree.write('fraud_graph', {
                        writeProperty: 'degree_score'
                    })
                """)
                
                # 3. PageRank - X√°c ƒë·ªãnh t√†i kho·∫£n c√≥ ·∫£nh h∆∞·ªüng
                print("üîç ƒêang ch·∫°y PageRank...")
                session.run("""
                    CALL gds.pageRank.write('fraud_graph', {
                        writeProperty: 'pagerank_score',
                        maxIterations: 20
                    })
                """)
                
                # 4. Louvain - Ph√°t hi·ªán c·ªông ƒë·ªìng
                print("üîç ƒêang ph√°t hi·ªán c·ªông ƒë·ªìng v·ªõi Louvain...")
                session.run("""
                    CALL gds.louvain.write('fraud_graph', {
                        writeProperty: 'community'
                    })
                """)
                
                # 5. Node Similarity - T√¨m c√°c t√†i kho·∫£n c√≥ h√†nh vi t∆∞∆°ng t·ª±
                print("üîç ƒêang t√≠nh Node Similarity...")
                session.run("""
                    CALL gds.nodeSimilarity.write('fraud_graph', {
                        writeProperty: 'similarity_score',
                        writeRelationshipType: 'SIMILAR_TO',
                        topK: 10
                    })
                """)
                
                # KH√îNG S·ª¨ D·ª§NG Shortest Path d·ª±a tr√™n is_fraud
                # Thay v√†o ƒë√≥, t√≠nh c√°c ch·ªâ s·ªë h√†nh vi b·∫•t th∆∞·ªùng
                  # 6. T√¨m c√°c h√†nh vi b·∫•t th∆∞·ªùng thay th·∫ø cho shortest path
                print("üîç ƒêang t√≠nh giao d·ªãch ra/v√†o...")
                self.process_transaction_stats()

                # 6.3 & 6.4: T√≠nh tx_imbalance v√† ƒë√°nh d·∫•u c√°c h√†nh vi b·∫•t th∆∞·ªùng
                print("üîç ƒêang ƒë√°nh d·∫•u h√†nh vi b·∫•t th∆∞·ªùng...")
                self.process_account_behaviors()

                print("üîç ƒêang ph√¢n t√≠ch giao d·ªãch c√≥ gi√° tr·ªã b·∫•t th∆∞·ªùng...")
                self.process_transaction_anomalies()
                  # 7. K·∫øt h·ª£p t·∫•t c·∫£ ƒë·∫∑c tr∆∞ng ƒë·ªÉ t√≠nh ƒëi·ªÉm gian l·∫≠n t·ªïng h·ª£p
                print("üîç ƒêang t√≠nh ƒëi·ªÉm gian l·∫≠n t·ªïng h·ª£p...")
                self.calculate_fraud_scores()
                
                # 8. ƒêi·ªÅu ch·ªânh ƒëi·ªÉm gian l·∫≠n c·ªßa c·ªông ƒë·ªìng - phi√™n b·∫£n t·ªëi ∆∞u
                print("üîç ƒêang t√¨m c√°c c·ªông ƒë·ªìng c√≥ ƒëi·ªÉm gian l·∫≠n cao...")
                self.process_high_risk_communities()
                
                # 9. Chu·∫©n h√≥a l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o trong kho·∫£ng 0-1
                print("üîç ƒêang chu·∫©n h√≥a ƒëi·ªÉm cu·ªëi c√πng...")
                self.finalize_and_evaluate()
                
                # # 11. X√≥a projected graph ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ
                # print("üîç ƒêang x√≥a projected graph...")
                self.cleanup_projected_graph()
                print("‚úÖ Ph√¢n t√≠ch gian l·∫≠n ho√†n t·∫•t.")
                return True
                
            except Exception as e:
                print(f"L·ªói khi ph√¢n t√≠ch gian l·∫≠n: {e}")
                return False
                
    def cleanup_projected_graph(self):
        """X√≥a projected graph v·ªõi c∆° ch·∫ø timeout v√† b·ªè qua vi·ªác ki·ªÉm tra t·ªìn t·∫°i"""
        with self.driver.session() as session:
            print("üîç ƒêang x√≥a projected graph...")
            try:
                # Th·ª≠ x√≥a tr·ª±c ti·∫øp m√† kh√¥ng ki·ªÉm tra tr∆∞·ªõc
                session.run("""
                    CALL gds.graph.drop('fraud_graph', false)
                    YIELD graphName
                    RETURN 'ƒê√£ x√≥a ' + graphName AS message
                """)
                print("  ƒê√£ x√≥a projected graph th√†nh c√¥ng")
            except Exception as e:
                # N·∫øu l·ªói v√¨ graph kh√¥ng t·ªìn t·∫°i - kh√¥ng sao c·∫£
                if "Graph with name fraud_graph does not exist" in str(e):
                    print("  Projected graph kh√¥ng t·ªìn t·∫°i, kh√¥ng c·∫ßn x√≥a")
                else:
                    print(f"  Kh√¥ng th·ªÉ x√≥a projected graph: {str(e)[:150]}...")
                
                # Ti·∫øp t·ª•c x·ª≠ l√Ω b√¨nh th∆∞·ªùng
                return True
    
    def close(self):
        """ƒê√≥ng k·∫øt n·ªëi ƒë·∫øn Neo4j"""
        if self.driver:
            self.driver.close()